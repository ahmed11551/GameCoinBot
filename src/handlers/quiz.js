const DatabaseService = require('../services/DatabaseService');
const RedisService = require('../services/RedisService');
const { v4: uuidv4 } = require('uuid');

// –ü–æ–∫–∞–∑ –º–µ–Ω—é –≤–∏–∫—Ç–æ—Ä–∏–Ω
const showQuizMenu = async (ctx) => {
  const quizText = `üéØ <b>–í–∏–∫—Ç–æ—Ä–∏–Ω—ã</b>

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å:

üìö <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>
‚Ä¢ üé¨ –ö–∏–Ω–æ - –≤–æ–ø—Ä–æ—Å—ã –æ —Ñ–∏–ª—å–º–∞—Ö
‚Ä¢ üéµ –ú—É–∑—ã–∫–∞ - –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã  
‚Ä¢ üî¨ –ù–∞—É–∫–∞ - –Ω–∞—É—á–Ω—ã–µ —Ñ–∞–∫—Ç—ã
‚Ä¢ üéÆ –ò–≥—Ä—ã - –∏–≥—Ä–æ–≤–∞—è –∏–Ω–¥—É—Å—Ç—Ä–∏—è

‚≠ê <b>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</b>
‚Ä¢ üü¢ –õ–µ–≥–∫–∞—è - 50 –º–æ–Ω–µ—Ç –∑–∞ –ø–æ–±–µ–¥—É
‚Ä¢ üü° –°—Ä–µ–¥–Ω—è—è - 100 –º–æ–Ω–µ—Ç + 10 –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã—Ö –∫–∞–º–Ω–µ–π
‚Ä¢ üî¥ –°–ª–æ–∂–Ω–∞—è - 200 –º–æ–Ω–µ—Ç + 25 –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã—Ö –∫–∞–º–Ω–µ–π

‚è±Ô∏è <b>–í—Ä–µ–º—è –Ω–∞ –≤–æ–ø—Ä–æ—Å:</b> 15 —Å–µ–∫—É–Ω–¥
üìù <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤:</b> 10`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üé¨ –ö–∏–Ω–æ', callback_data: 'quiz_category_movies' },
        { text: 'üéµ –ú—É–∑—ã–∫–∞', callback_data: 'quiz_category_music' }
      ],
      [
        { text: 'üî¨ –ù–∞—É–∫–∞', callback_data: 'quiz_category_science' },
        { text: 'üéÆ –ò–≥—Ä—ã', callback_data: 'quiz_category_games' }
      ],
      [
        { text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
      ]
    ]
  };

  await ctx.editMessageText(quizText, { 
    parse_mode: 'HTML', 
    reply_markup: keyboard 
  });
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω
const handleCallback = async (ctx) => {
  const callbackData = ctx.callbackQuery.data;
  
  if (callbackData.startsWith('quiz_category_')) {
    const category = callbackData.replace('quiz_category_', '');
    await showDifficultyMenu(ctx, category);
  } else if (callbackData.startsWith('quiz_difficulty_')) {
    const parts = callbackData.replace('quiz_difficulty_', '').split('_');
    const category = parts[0];
    const difficulty = parts[1];
    await startQuiz(ctx, category, difficulty);
  } else if (callbackData.startsWith('quiz_answer_')) {
    await handleQuizAnswer(ctx);
  } else if (callbackData === 'quiz_next_question') {
    await showNextQuestion(ctx);
  } else if (callbackData === 'quiz_finish') {
    await finishQuiz(ctx);
  }
};

// –ü–æ–∫–∞–∑ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
const showDifficultyMenu = async (ctx, category) => {
  const categoryNames = {
    movies: 'üé¨ –ö–∏–Ω–æ',
    music: 'üéµ –ú—É–∑—ã–∫–∞', 
    science: 'üî¨ –ù–∞—É–∫–∞',
    games: 'üéÆ –ò–≥—Ä—ã'
  };
  
  const difficultyText = `üéØ <b>${categoryNames[category]}</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å:

üü¢ <b>–õ–µ–≥–∫–∞—è</b>
‚Ä¢ 50 –º–æ–Ω–µ—Ç –∑–∞ –ø–æ–±–µ–¥—É
‚Ä¢ –ü—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã

üü° <b>–°—Ä–µ–¥–Ω—è—è</b>  
‚Ä¢ 100 –º–æ–Ω–µ—Ç + 10 –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã—Ö –∫–∞–º–Ω–µ–π
‚Ä¢ –í–æ–ø—Ä–æ—Å—ã —Å—Ä–µ–¥–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏

üî¥ <b>–°–ª–æ–∂–Ω–∞—è</b>
‚Ä¢ 200 –º–æ–Ω–µ—Ç + 25 –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã—Ö –∫–∞–º–Ω–µ–π  
‚Ä¢ –°–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üü¢ –õ–µ–≥–∫–∞—è', callback_data: `quiz_difficulty_${category}_easy` },
        { text: 'üü° –°—Ä–µ–¥–Ω—è—è', callback_data: `quiz_difficulty_${category}_medium` }
      ],
      [
        { text: 'üî¥ –°–ª–æ–∂–Ω–∞—è', callback_data: `quiz_difficulty_${category}_hard` }
      ],
      [
        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'quiz_menu' }
      ]
    ]
  };

  await ctx.editMessageText(difficultyText, { 
    parse_mode: 'HTML', 
    reply_markup: keyboard 
  });
};

// –ù–∞—á–∞–ª–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
const startQuiz = async (ctx) => {
  const callbackData = ctx.callbackQuery.data;
  const parts = callbackData.replace('quiz_difficulty_', '').split('_');
  const category = parts[0];
  const difficulty = parts[1];
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
    const questions = await DatabaseService.getQuizQuestions(category, difficulty, 10);
    
    if (questions.length < 10) {
      await ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    const sessionId = uuidv4();
    const session = {
      id: sessionId,
      userId: ctx.user.id,
      category,
      difficulty,
      questions: questions.map(q => q.id),
      currentQuestion: 0,
      answers: [],
      score: 0,
      startTime: Date.now()
    };
    
    await RedisService.setQuizSession(sessionId, session, 1800); // 30 –º–∏–Ω—É—Ç
    await DatabaseService.createQuizSession(ctx.user.id, category, difficulty, questions.map(q => q.id));
    
    await ctx.answerCbQuery('üéØ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–∞—á–∞–ª–∞—Å—å!');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await showQuestion(ctx, sessionId, questions[0], 0);
    
  } catch (error) {
    console.error('Start quiz error:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã');
  }
};

// –ü–æ–∫–∞–∑ –≤–æ–ø—Ä–æ—Å–∞
const showQuestion = async (ctx, sessionId, question, questionIndex) => {
  const options = JSON.parse(question.options);
  const timeLeft = 15;
  
  const questionText = `üéØ <b>–í–æ–ø—Ä–æ—Å ${questionIndex + 1}/10</b>

${question.question}

‚è±Ô∏è <b>–í—Ä–µ–º—è:</b> ${timeLeft} —Å–µ–∫—É–Ω–¥`;

  const keyboard = {
    inline_keyboard: [
      options.map((option, index) => ({
        text: `${String.fromCharCode(65 + index)}. ${option}`,
        callback_data: `quiz_answer_${sessionId}_${index}`
      })),
      [
        { text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: `quiz_answer_${sessionId}_skip` }
      ]
    ]
  };

  await ctx.editMessageText(questionText, { 
    parse_mode: 'HTML', 
    reply_markup: keyboard 
  });
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
  setTimeout(async () => {
    await handleQuizTimeout(ctx, sessionId);
  }, 15000);
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
const handleQuizAnswer = async (ctx) => {
  const callbackData = ctx.callbackQuery.data;
  const parts = callbackData.replace('quiz_answer_', '').split('_');
  const sessionId = parts[0];
  const answerIndex = parts[1];
  
  try {
    const session = await RedisService.getQuizSession(sessionId);
    if (!session) {
      await ctx.answerCbQuery('‚ùå –°–µ—Å—Å–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∏—Å—Ç–µ–∫–ª–∞');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    const questions = await DatabaseService.query(
      'SELECT * FROM quiz_questions WHERE id = ANY($1) ORDER BY array_position($1, id)',
      [session.questions]
    );
    
    const currentQuestion = questions.rows[session.currentQuestion];
    const isCorrect = answerIndex !== 'skip' && parseInt(answerIndex) === currentQuestion.correct_answer;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    session.answers.push({
      questionId: currentQuestion.id,
      answer: answerIndex === 'skip' ? -1 : parseInt(answerIndex),
      isCorrect,
      timeSpent: Date.now() - session.startTime
    });
    
    if (isCorrect) {
      session.score++;
    }
    
    session.currentQuestion++;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
    await RedisService.setQuizSession(sessionId, session, 1800);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–≤–µ—Ç–∞
    const resultText = isCorrect ? 
      `‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n\n${currentQuestion.explanation || ''}` :
      `‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${JSON.parse(currentQuestion.options)[currentQuestion.correct_answer]}\n\n${currentQuestion.explanation || ''}`;
    
    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å', callback_data: 'quiz_next_question' }
        ]
      ]
    };
    
    await ctx.editMessageText(resultText, { 
      parse_mode: 'HTML', 
      reply_markup: keyboard 
    });
    
    await ctx.answerCbQuery(isCorrect ? '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!' : '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!');
    
  } catch (error) {
    console.error('Handle quiz answer error:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞');
  }
};

// –ü–æ–∫–∞–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
const showNextQuestion = async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º sessionId –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
    const callbackData = ctx.callbackQuery?.data || '';
    const sessionId = callbackData.replace('quiz_next_question', '');
    
    const session = await RedisService.getQuizSession(sessionId);
    if (!session) {
      await ctx.answerCbQuery('‚ùå –°–µ—Å—Å–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∏—Å—Ç–µ–∫–ª–∞');
      return;
    }
    
    if (session.currentQuestion >= session.questions.length) {
      await finishQuiz(ctx);
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    const questions = await DatabaseService.query(
      'SELECT * FROM quiz_questions WHERE id = ANY($1) ORDER BY array_position($1, id)',
      [session.questions]
    );
    
    const nextQuestion = questions.rows[session.currentQuestion];
    await showQuestion(ctx, sessionId, nextQuestion, session.currentQuestion);
    
  } catch (error) {
    console.error('Show next question error:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞');
  }
};

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
const finishQuiz = async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º sessionId –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
    const callbackData = ctx.callbackQuery?.data || '';
    const sessionId = callbackData.replace('quiz_finish', '');
    
    const session = await RedisService.getQuizSession(sessionId);
    if (!session) {
      await ctx.answerCbQuery('‚ùå –°–µ—Å—Å–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∏—Å—Ç–µ–∫–ª–∞');
      return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await DatabaseService.updateQuizSession(session.id, session.answers, session.score);
    
    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã
    const rewards = calculateQuizRewards(session.difficulty, session.score);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await DatabaseService.updateUser(ctx.user.id, {
      coins: ctx.user.coins + rewards.coins,
      gems: ctx.user.gems + rewards.gems,
      experience: ctx.user.experience + rewards.experience
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    if (rewards.coins > 0) {
      await DatabaseService.addTransaction(
        ctx.user.id,
        'earn',
        rewards.coins,
        'coins',
        `–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ ${session.category} (${session.difficulty})`
      );
    }
    
    if (rewards.gems > 0) {
      await DatabaseService.addTransaction(
        ctx.user.id,
        'earn',
        rewards.gems,
        'gems',
        `–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ ${session.category} (${session.difficulty})`
      );
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await DatabaseService.updateUserStats(ctx.user.id, {
      games_played: 1,
      games_won: session.score >= 7 ? 1 : 0,
      quiz_correct_answers: session.score
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const newAchievements = await DatabaseService.checkAndAwardAchievement(
      ctx.user.id, 
      'quiz_play', 
      1
    );
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const resultText = `üéØ <b>–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${session.score}/10
‚≠ê –û—Ü–µ–Ω–∫–∞: ${getQuizGrade(session.score)}

üí∞ <b>–ù–∞–≥—Ä–∞–¥—ã:</b>
ü™ô –ú–æ–Ω–µ—Ç—ã: +${rewards.coins}
üíé –î—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–µ –∫–∞–º–Ω–∏: +${rewards.gems}
üìà –û–ø—ã—Ç: +${rewards.experience}

${newAchievements.length > 0 ? `üèÜ <b>–ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n${newAchievements.map(a => `${a.icon} ${a.name}`).join('\n')}` : ''}`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üéØ –ï—â–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É', callback_data: 'quiz_menu' },
          { text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
        ]
      ]
    };

    await ctx.editMessageText(resultText, { 
      parse_mode: 'HTML', 
      reply_markup: keyboard 
    });
    
    // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    await RedisService.del(`quiz:${sessionId}`);
    
  } catch (error) {
    console.error('Finish quiz error:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã');
  }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞
const handleQuizTimeout = async (ctx, sessionId) => {
  try {
    const session = await RedisService.getQuizSession(sessionId);
    if (!session) {
      return;
    }
    
    // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π
    session.answers.push({
      questionId: session.questions[session.currentQuestion],
      answer: -1,
      isCorrect: false,
      timeSpent: 15000
    });
    
    session.currentQuestion++;
    
    if (session.currentQuestion >= session.questions.length) {
      await finishQuiz(ctx);
    } else {
      await showNextQuestion(ctx);
    }
    
  } catch (error) {
    console.error('Handle quiz timeout error:', error);
  }
};

// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥
function calculateQuizRewards(difficulty, score) {
  const baseRewards = {
    easy: { coins: 50, gems: 0, experience: 10 },
    medium: { coins: 100, gems: 10, experience: 20 },
    hard: { coins: 200, gems: 25, experience: 30 }
  };
  
  const base = baseRewards[difficulty];
  const multiplier = score / 10; // –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
  
  return {
    coins: Math.floor(base.coins * multiplier),
    gems: Math.floor(base.gems * multiplier),
    experience: Math.floor(base.experience * multiplier)
  };
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
function getQuizGrade(score) {
  if (score >= 9) return '–û—Ç–ª–∏—á–Ω–æ! üåü';
  if (score >= 7) return '–•–æ—Ä–æ—à–æ! üëç';
  if (score >= 5) return '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ üëå';
  return '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑! üí™';
}

module.exports = {
  showQuizMenu,
  handleCallback
};
