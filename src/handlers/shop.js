const DatabaseService = require('../services/DatabaseService');

// –ü–æ–∫–∞–∑ –º–∞–≥–∞–∑–∏–Ω–∞
const showShop = async (ctx) => {
  const user = ctx.user;
  
  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞
  const shopItems = await DatabaseService.query(
    'SELECT * FROM shop_items WHERE is_active = true ORDER BY type, price_stars'
  );
  
  const shopText = `üõí <b>–ú–∞–≥–∞–∑–∏–Ω</b>

üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b>
ü™ô –ú–æ–Ω–µ—Ç—ã: ${user.coins}
üíé –î—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–µ –∫–∞–º–Ω–∏: ${user.gems}
‚≠ê Telegram Stars: ${user.telegram_stars || 0}

üí° <b>–ö–∞–∫ –∫—É–ø–∏—Ç—å:</b>
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Telegram Stars –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–∞–ª—é—Ç—ã –∏ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'ü™ô –ü–∞–∫–µ—Ç—ã –º–æ–Ω–µ—Ç', callback_data: 'shop_coins' },
        { text: 'üíé –î—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–µ –∫–∞–º–Ω–∏', callback_data: 'shop_gems' }
      ],
      [
        { text: 'üíé –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞', callback_data: 'shop_premium' },
        { text: 'üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫', callback_data: 'shop_history' }
      ],
      [
        { text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
      ]
    ]
  };

  await ctx.editMessageText(shopText, { 
    parse_mode: 'HTML', 
    reply_markup: keyboard 
  });
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞
const handleCallback = async (ctx) => {
  const callbackData = ctx.callbackQuery.data;
  
  switch (callbackData) {
    case 'shop_coins':
      await showCoinsPackages(ctx);
      break;
    case 'shop_gems':
      await showGemsPackages(ctx);
      break;
    case 'shop_premium':
      await showPremiumSubscription(ctx);
      break;
    case 'shop_history':
      await showPurchaseHistory(ctx);
      break;
    case 'shop':
      await showShop(ctx);
      break;
    default:
      if (callbackData.startsWith('shop_buy_')) {
        await buyItem(ctx);
      }
  }
};

// –ü–æ–∫–∞–∑ –ø–∞–∫–µ—Ç–æ–≤ –º–æ–Ω–µ—Ç
const showCoinsPackages = async (ctx) => {
  const coinsText = `ü™ô <b>–ü–∞–∫–µ—Ç—ã –º–æ–Ω–µ—Ç</b>

üí∞ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:</b>

ü•â <b>–ë–∞–∑–æ–≤—ã–π –ø–∞–∫–µ—Ç</b>
‚Ä¢ 1000 –º–æ–Ω–µ—Ç
‚Ä¢ –¶–µ–Ω–∞: 49 Telegram Stars
‚Ä¢ –ë–æ–Ω—É—Å: 0%

ü•à <b>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞–∫–µ—Ç</b>
‚Ä¢ 5000 –º–æ–Ω–µ—Ç  
‚Ä¢ –¶–µ–Ω–∞: 199 Telegram Stars
‚Ä¢ –ë–æ–Ω—É—Å: +10% (500 –º–æ–Ω–µ—Ç)

ü•á <b>–ü—Ä–µ–º–∏—É–º –ø–∞–∫–µ—Ç</b>
‚Ä¢ 15000 –º–æ–Ω–µ—Ç
‚Ä¢ –¶–µ–Ω–∞: 499 Telegram Stars
‚Ä¢ –ë–æ–Ω—É—Å: +20% (3000 –º–æ–Ω–µ—Ç)

üíé <b>VIP –ø–∞–∫–µ—Ç</b>
‚Ä¢ 50000 –º–æ–Ω–µ—Ç
‚Ä¢ –¶–µ–Ω–∞: 1499 Telegram Stars
‚Ä¢ –ë–æ–Ω—É—Å: +30% (15000 –º–æ–Ω–µ—Ç)

üí° <b>–°–æ–≤–µ—Ç:</b> –ß–µ–º –±–æ–ª—å—à–µ –ø–∞–∫–µ—Ç, —Ç–µ–º –±–æ–ª—å—à–µ –±–æ–Ω—É—Å!`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'ü•â 1000 –º–æ–Ω–µ—Ç - 49‚≠ê', callback_data: 'shop_buy_coins_1000' },
        { text: 'ü•à 5000 –º–æ–Ω–µ—Ç - 199‚≠ê', callback_data: 'shop_buy_coins_5000' }
      ],
      [
        { text: 'ü•á 15000 –º–æ–Ω–µ—Ç - 499‚≠ê', callback_data: 'shop_buy_coins_15000' },
        { text: 'üíé 50000 –º–æ–Ω–µ—Ç - 1499‚≠ê', callback_data: 'shop_buy_coins_50000' }
      ],
      [
        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'shop' }
      ]
    ]
  };

  await ctx.editMessageText(coinsText, { 
    parse_mode: 'HTML', 
    reply_markup: keyboard 
  });
};

// –ü–æ–∫–∞–∑ –ø–∞–∫–µ—Ç–æ–≤ –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã—Ö –∫–∞–º–Ω–µ–π
const showGemsPackages = async (ctx) => {
  const gemsText = `üíé <b>–î—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–µ –∫–∞–º–Ω–∏</b>

üíé <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:</b>

üíé <b>–ú–∞–ª—ã–π –ø–∞–∫–µ—Ç</b>
‚Ä¢ 100 –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã—Ö –∫–∞–º–Ω–µ–π
‚Ä¢ –¶–µ–Ω–∞: 99 Telegram Stars

üíéüíé <b>–°—Ä–µ–¥–Ω–∏–π –ø–∞–∫–µ—Ç</b>
‚Ä¢ 600 –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã—Ö –∫–∞–º–Ω–µ–π
‚Ä¢ –¶–µ–Ω–∞: 499 Telegram Stars
‚Ä¢ –ë–æ–Ω—É—Å: +20% (120 –∫–∞–º–Ω–µ–π)

üíéüíéüíé <b>–ë–æ–ª—å—à–æ–π –ø–∞–∫–µ—Ç</b>
‚Ä¢ 1500 –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã—Ö –∫–∞–º–Ω–µ–π
‚Ä¢ –¶–µ–Ω–∞: 999 Telegram Stars
‚Ä¢ –ë–æ–Ω—É—Å: +25% (375 –∫–∞–º–Ω–µ–π)

üí° <b>–î–ª—è —á–µ–≥–æ –Ω—É–∂–Ω—ã –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–µ –∫–∞–º–Ω–∏:</b>
‚Ä¢ –ü–æ–∫—É–ø–∫–∞ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π
‚Ä¢ –£—á–∞—Å—Ç–∏–µ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞—Ö
‚Ä¢ –ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üíé 100 –∫–∞–º–Ω–µ–π - 99‚≠ê', callback_data: 'shop_buy_gems_100' },
        { text: 'üíéüíé 600 –∫–∞–º–Ω–µ–π - 499‚≠ê', callback_data: 'shop_buy_gems_600' }
      ],
      [
        { text: 'üíéüíéüíé 1500 –∫–∞–º–Ω–µ–π - 999‚≠ê', callback_data: 'shop_buy_gems_1500' }
      ],
      [
        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'shop' }
      ]
    ]
  };

  await ctx.editMessageText(gemsText, { 
    parse_mode: 'HTML', 
    reply_markup: keyboard 
  });
};

// –ü–æ–∫–∞–∑ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏
const showPremiumSubscription = async (ctx) => {
  const user = ctx.user;
  const isPremium = user.is_premium && new Date(user.premium_expires_at) > new Date();
  
  const premiumText = `üíé <b>–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞</b>

${isPremium ? 
  `‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –ê–∫—Ç–∏–≤–Ω–∞ –¥–æ ${new Date(user.premium_expires_at).toLocaleDateString('ru-RU')}` :
  `‚ùå <b>–°—Ç–∞—Ç—É—Å:</b> –ù–µ–∞–∫—Ç–∏–≤–Ω–∞`
}

üí∞ <b>–¶–µ–Ω–∞:</b> 299 Telegram Stars/–º–µ—Å—è—Ü

üéÅ <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>
‚Ä¢ +20% –∫ –∑–∞—Ä–∞–±–æ—Ç–∫—É –≤–æ –≤—Å–µ—Ö –∏–≥—Ä–∞—Ö
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: 200 –º–æ–Ω–µ—Ç (–≤–º–µ—Å—Ç–æ 100)
‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã –∏ —Ç–µ–º—ã
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ –£—á–∞—Å—Ç–∏–µ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞—Ö
‚Ä¢ –£–¥–≤–æ–µ–Ω–Ω—ã–π –æ–ø—ã—Ç –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –∏–≥—Ä

üí° <b>–°–æ–≤–µ—Ç:</b> –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –æ–∫—É–ø–∞–µ—Ç—Å—è –∑–∞ —Å—á–µ—Ç —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞!`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: isPremium ? 'üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' : 'üíé –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 
          callback_data: 'shop_buy_premium' }
      ],
      [
        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'shop' }
      ]
    ]
  };

  await ctx.editMessageText(premiumText, { 
    parse_mode: 'HTML', 
    reply_markup: keyboard 
  });
};

// –ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞
const buyItem = async (ctx) => {
  const callbackData = ctx.callbackQuery.data;
  const parts = callbackData.replace('shop_buy_', '').split('_');
  const itemType = parts[0];
  const itemValue = parts[1];
  
  try {
    let item;
    let price;
    let description;
    
    switch (itemType) {
      case 'coins':
        const coinsPackages = {
          '1000': { price: 49, amount: 1000, bonus: 0 },
          '5000': { price: 199, amount: 5000, bonus: 500 },
          '15000': { price: 499, amount: 15000, bonus: 3000 },
          '50000': { price: 1499, amount: 50000, bonus: 15000 }
        };
        
        item = coinsPackages[itemValue];
        price = item.price;
        description = `–ü–∞–∫–µ—Ç –º–æ–Ω–µ—Ç: ${item.amount} (+${item.bonus} –±–æ–Ω—É—Å)`;
        break;
        
      case 'gems':
        const gemsPackages = {
          '100': { price: 99, amount: 100 },
          '600': { price: 499, amount: 720 }, // +20% –±–æ–Ω—É—Å
          '1500': { price: 999, amount: 1875 } // +25% –±–æ–Ω—É—Å
        };
        
        item = gemsPackages[itemValue];
        price = item.price;
        description = `–ü–∞–∫–µ—Ç –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã—Ö –∫–∞–º–Ω–µ–π: ${item.amount}`;
        break;
        
      case 'premium':
        price = 299;
        description = '–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π';
        break;
        
      default:
        await ctx.answerCbQuery('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä');
        return;
    }
    
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Stars API
    // –ü–æ–∫–∞ —á—Ç–æ —Å–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É
    
    const confirmText = `üõí <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏</b>

üì¶ <b>–¢–æ–≤–∞—Ä:</b> ${description}
üí∞ <b>–¶–µ–Ω–∞:</b> ${price} Telegram Stars

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è. –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Stars API.

–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫—É?`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: `shop_confirm_${itemType}_${itemValue}` },
          { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'shop' }
        ]
      ]
    };

    await ctx.editMessageText(confirmText, { 
      parse_mode: 'HTML', 
      reply_markup: keyboard 
    });
    
  } catch (error) {
    console.error('Buy item error:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ç–æ–≤–∞—Ä–∞');
  }
};

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
const confirmPurchase = async (ctx) => {
  const callbackData = ctx.callbackQuery.data;
  const parts = callbackData.replace('shop_confirm_', '').split('_');
  const itemType = parts[0];
  const itemValue = parts[1];
  
  try {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –ø–æ–∫—É–ø–∫—É
    let coinsToAdd = 0;
    let gemsToAdd = 0;
    let premiumDays = 0;
    
    switch (itemType) {
      case 'coins':
        const coinsPackages = {
          '1000': { amount: 1000, bonus: 0 },
          '5000': { amount: 5000, bonus: 500 },
          '15000': { amount: 15000, bonus: 3000 },
          '50000': { amount: 50000, bonus: 15000 }
        };
        const coinsItem = coinsPackages[itemValue];
        coinsToAdd = coinsItem.amount + coinsItem.bonus;
        break;
        
      case 'gems':
        const gemsPackages = {
          '100': { amount: 100 },
          '600': { amount: 720 },
          '1500': { amount: 1875 }
        };
        gemsToAdd = gemsPackages[itemValue].amount;
        break;
        
      case 'premium':
        premiumDays = 30;
        break;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updates = {};
    if (coinsToAdd > 0) updates.coins = ctx.user.coins + coinsToAdd;
    if (gemsToAdd > 0) updates.gems = ctx.user.gems + gemsToAdd;
    if (premiumDays > 0) {
      const currentExpiry = ctx.user.premium_expires_at ? new Date(ctx.user.premium_expires_at) : new Date();
      updates.premium_expires_at = new Date(currentExpiry.getTime() + premiumDays * 24 * 60 * 60 * 1000);
      updates.is_premium = true;
    }
    
    await DatabaseService.updateUser(ctx.user.id, updates);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await DatabaseService.addTransaction(
      ctx.user.id,
      'purchase',
      coinsToAdd || gemsToAdd || premiumDays,
      itemType === 'premium' ? 'premium' : itemType,
      `–ü–æ–∫—É–ø–∫–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ: ${itemType}`
    );
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–∫—É–ø–∫—É
    await DatabaseService.query(
      'INSERT INTO purchases (user_id, item_id, stars_spent) VALUES ($1, $2, $3)',
      [ctx.user.id, 'test_item', 0] // –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç ID —Ç–æ–≤–∞—Ä–∞ –∏ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ Stars
    );
    
    const successText = `‚úÖ <b>–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!</b>

${coinsToAdd > 0 ? `ü™ô –ü–æ–ª—É—á–µ–Ω–æ –º–æ–Ω–µ—Ç: ${coinsToAdd}` : ''}
${gemsToAdd > 0 ? `üíé –ü–æ–ª—É—á–µ–Ω–æ –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã—Ö –∫–∞–º–Ω–µ–π: ${gemsToAdd}` : ''}
${premiumDays > 0 ? `üíé –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ ${premiumDays} –¥–Ω–µ–π` : ''}

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üõí –ï—â–µ –ø–æ–∫—É–ø–∫–∏', callback_data: 'shop' },
          { text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
        ]
      ]
    };

    await ctx.editMessageText(successText, { 
      parse_mode: 'HTML', 
      reply_markup: keyboard 
    });
    
  } catch (error) {
    console.error('Confirm purchase error:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ–∫—É–ø–∫–∏');
  }
};

// –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫
const showPurchaseHistory = async (ctx) => {
  try {
    const purchases = await DatabaseService.query(
      `SELECT p.*, si.name, si.type 
       FROM purchases p
       LEFT JOIN shop_items si ON p.item_id = si.id
       WHERE p.user_id = $1
       ORDER BY p.created_at DESC
       LIMIT 10`,
      [ctx.user.id]
    );
    
    let historyText = `üìä <b>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫</b>\n\n`;
    
    if (purchases.rows.length === 0) {
      historyText += `‚ùå –ü–æ–∫—É–ø–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`;
    } else {
      purchases.rows.forEach((purchase, index) => {
        historyText += `${index + 1}. <b>${purchase.name || '–¢–æ–≤–∞—Ä'}</b>\n`;
        historyText += `üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${purchase.stars_spent} Telegram Stars\n`;
        historyText += `üìÖ –î–∞—Ç–∞: ${new Date(purchase.created_at).toLocaleDateString('ru-RU')}\n\n`;
      });
    }
    
    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'shop' }
        ]
      ]
    };

    await ctx.editMessageText(historyText, { 
      parse_mode: 'HTML', 
      reply_markup: keyboard 
    });
    
  } catch (error) {
    console.error('Show purchase history error:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫');
  }
};

module.exports = {
  showShop,
  handleCallback
};
