const DatabaseService = require('../services/DatabaseService');
const RedisService = require('../services/RedisService');

// –ü–æ–∫–∞–∑ –º–µ–Ω—é –∫–∞–∑–∏–Ω–æ
const showCasinoMenu = async (ctx) => {
  const user = ctx.user;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø–æ—Ç–µ—Ä—å
  const dailyLoss = await RedisService.getCasinoLimit(user.id);
  const maxDailyLoss = parseInt(process.env.MAX_DAILY_CASINO_LOSS) || 5000;
  
  const casinoText = `üé∞ <b>–ö–∞–∑–∏–Ω–æ –∏–≥—Ä—ã</b>

üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> ${user.coins} –º–æ–Ω–µ—Ç
üìä <b>–ü–æ—Ç–µ—Ä–∏ —Å–µ–≥–æ–¥–Ω—è:</b> ${dailyLoss}/${maxDailyLoss} –º–æ–Ω–µ—Ç

üéÆ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã:</b>

üé∞ <b>–°–ª–æ—Ç-–º–∞—à–∏–Ω–∞</b>
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 10 –º–æ–Ω–µ—Ç
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 1000 –º–æ–Ω–µ—Ç
‚Ä¢ –®–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞: 30%

üé≤ <b>–ö–æ—Å—Ç–∏</b>
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 20 –º–æ–Ω–µ—Ç
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 1000 –º–æ–Ω–µ—Ç
‚Ä¢ –®–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞: 50%

üéØ <b>–†—É–ª–µ—Ç–∫–∞</b>
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 50 –º–æ–Ω–µ—Ç
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 1000 –º–æ–Ω–µ—Ç
‚Ä¢ –®–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞: 48%

üÉè <b>–ë–ª—ç–∫–¥–∂–µ–∫</b>
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 100 –º–æ–Ω–µ—Ç
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 1000 –º–æ–Ω–µ—Ç
‚Ä¢ –®–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞: 49%

‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:</b> –ò–≥—Ä–∞–π—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ!`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üé∞ –°–ª–æ—Ç-–º–∞—à–∏–Ω–∞', callback_data: 'casino_slots' },
        { text: 'üé≤ –ö–æ—Å—Ç–∏', callback_data: 'casino_dice' }
      ],
      [
        { text: 'üéØ –†—É–ª–µ—Ç–∫–∞', callback_data: 'casino_roulette' },
        { text: 'üÉè –ë–ª—ç–∫–¥–∂–µ–∫', callback_data: 'casino_blackjack' }
      ],
      [
        { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'casino_stats' },
        { text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
      ]
    ]
  };

  await ctx.editMessageText(casinoText, { 
    parse_mode: 'HTML', 
    reply_markup: keyboard 
  });
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–æ–≤ –∫–∞–∑–∏–Ω–æ
const handleCallback = async (ctx) => {
  const callbackData = ctx.callbackQuery.data;
  
  switch (callbackData) {
    case 'casino_slots':
      await showSlotsMenu(ctx);
      break;
    case 'casino_dice':
      await showDiceMenu(ctx);
      break;
    case 'casino_roulette':
      await showRouletteMenu(ctx);
      break;
    case 'casino_blackjack':
      await showBlackjackMenu(ctx);
      break;
    case 'casino_stats':
      await showCasinoStats(ctx);
      break;
    case 'casino_menu':
      await showCasinoMenu(ctx);
      break;
    default:
      if (callbackData.startsWith('casino_play_')) {
        await playCasinoGame(ctx);
      }
  }
};

// –°–ª–æ—Ç-–º–∞—à–∏–Ω–∞
const showSlotsMenu = async (ctx) => {
  const slotsText = `üé∞ <b>–°–ª–æ—Ç-–º–∞—à–∏–Ω–∞</b>

üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> ${ctx.user.coins} –º–æ–Ω–µ—Ç

üéØ <b>–ü—Ä–∞–≤–∏–ª–∞:</b>
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É –æ—Ç 10 –¥–æ 1000 –º–æ–Ω–µ—Ç
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–ö—Ä—É—Ç–∏—Ç—å!" –¥–ª—è –∏–≥—Ä—ã
‚Ä¢ 3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞ = –≤—ã–∏–≥—Ä—ã—à!

üéÅ <b>–í—ã–ø–ª–∞—Ç—ã:</b>
‚Ä¢ üçíüçíüçí = x2 —Å—Ç–∞–≤–∫–∏
‚Ä¢ üçãüçãüçã = x3 —Å—Ç–∞–≤–∫–∏  
‚Ä¢ üçáüçáüçá = x5 —Å—Ç–∞–≤–∫–∏
‚Ä¢ üíéüíéüíé = x10 —Å—Ç–∞–≤–∫–∏
‚Ä¢ üçÄüçÄüçÄ = x20 —Å—Ç–∞–≤–∫–∏`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: '10 –º–æ–Ω–µ—Ç', callback_data: 'casino_play_slots_10' },
        { text: '50 –º–æ–Ω–µ—Ç', callback_data: 'casino_play_slots_50' },
        { text: '100 –º–æ–Ω–µ—Ç', callback_data: 'casino_play_slots_100' }
      ],
      [
        { text: '500 –º–æ–Ω–µ—Ç', callback_data: 'casino_play_slots_500' },
        { text: '1000 –º–æ–Ω–µ—Ç', callback_data: 'casino_play_slots_1000' }
      ],
      [
        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'casino_menu' }
      ]
    ]
  };

  await ctx.editMessageText(slotsText, { 
    parse_mode: 'HTML', 
    reply_markup: keyboard 
  });
};

// –ö–æ—Å—Ç–∏
const showDiceMenu = async (ctx) => {
  const diceText = `üé≤ <b>–ö–æ—Å—Ç–∏</b>

üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> ${ctx.user.coins} –º–æ–Ω–µ—Ç

üéØ <b>–ü—Ä–∞–≤–∏–ª–∞:</b>
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É –æ—Ç 20 –¥–æ 1000 –º–æ–Ω–µ—Ç
‚Ä¢ –£–≥–∞–¥–∞–π—Ç–µ, –±—É–¥–µ—Ç –ª–∏ —Å—É–º–º–∞ –±–æ–ª—å—à–µ –∏–ª–∏ –º–µ–Ω—å—à–µ 7
‚Ä¢ –í—ã–∏–≥—Ä—ã—à = x2 —Å—Ç–∞–≤–∫–∏

üéÅ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>
‚Ä¢ 2-6 = –ú–µ–Ω—å—à–µ 7
‚Ä¢ 7 = –ù–∏—á—å—è (–≤–æ–∑–≤—Ä–∞—Ç —Å—Ç–∞–≤–∫–∏)
‚Ä¢ 8-12 = –ë–æ–ª—å—à–µ 7`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: '20 –º–æ–Ω–µ—Ç', callback_data: 'casino_play_dice_20' },
        { text: '50 –º–æ–Ω–µ—Ç', callback_data: 'casino_play_dice_50' },
        { text: '100 –º–æ–Ω–µ—Ç', callback_data: 'casino_play_dice_100' }
      ],
      [
        { text: '500 –º–æ–Ω–µ—Ç', callback_data: 'casino_play_dice_500' },
        { text: '1000 –º–æ–Ω–µ—Ç', callback_data: 'casino_play_dice_1000' }
      ],
      [
        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'casino_menu' }
      ]
    ]
  };

  await ctx.editMessageText(diceText, { 
    parse_mode: 'HTML', 
    reply_markup: keyboard 
  });
};

// –†—É–ª–µ—Ç–∫–∞
const showRouletteMenu = async (ctx) => {
  const rouletteText = `üéØ <b>–†—É–ª–µ—Ç–∫–∞</b>

üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> ${ctx.user.coins} –º–æ–Ω–µ—Ç

üéØ <b>–ü—Ä–∞–≤–∏–ª–∞:</b>
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É –æ—Ç 50 –¥–æ 1000 –º–æ–Ω–µ—Ç
‚Ä¢ –£–≥–∞–¥–∞–π—Ç–µ —Ü–≤–µ—Ç: –∫—Ä–∞—Å–Ω—ã–π –∏–ª–∏ —á–µ—Ä–Ω—ã–π
‚Ä¢ –í—ã–∏–≥—Ä—ã—à = x2 —Å—Ç–∞–≤–∫–∏

üéÅ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>
‚Ä¢ üî¥ –ö—Ä–∞—Å–Ω—ã–π = –≤—ã–∏–≥—Ä—ã—à
‚Ä¢ ‚ö´ –ß–µ—Ä–Ω—ã–π = –≤—ã–∏–≥—Ä—ã—à
‚Ä¢ üü¢ –ó–µ–ª–µ–Ω—ã–π = –ø—Ä–æ–∏–≥—Ä—ã—à`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: '50 –º–æ–Ω–µ—Ç', callback_data: 'casino_play_roulette_50' },
        { text: '100 –º–æ–Ω–µ—Ç', callback_data: 'casino_play_roulette_100' },
        { text: '200 –º–æ–Ω–µ—Ç', callback_data: 'casino_play_roulette_200' }
      ],
      [
        { text: '500 –º–æ–Ω–µ—Ç', callback_data: 'casino_play_roulette_500' },
        { text: '1000 –º–æ–Ω–µ—Ç', callback_data: 'casino_play_roulette_1000' }
      ],
      [
        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'casino_menu' }
      ]
    ]
  };

  await ctx.editMessageText(rouletteText, { 
    parse_mode: 'HTML', 
    reply_markup: keyboard 
  );
};

// –ë–ª—ç–∫–¥–∂–µ–∫
const showBlackjackMenu = async (ctx) => {
  const blackjackText = `üÉè <b>–ë–ª—ç–∫–¥–∂–µ–∫</b>

üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> ${ctx.user.coins} –º–æ–Ω–µ—Ç

üéØ <b>–ü—Ä–∞–≤–∏–ª–∞:</b>
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É –æ—Ç 100 –¥–æ 1000 –º–æ–Ω–µ—Ç
‚Ä¢ –¶–µ–ª—å: –Ω–∞–±—Ä–∞—Ç—å 21 –æ—á–∫–æ –∏–ª–∏ –±–ª–∏–∂–µ –∫ 21, —á–µ–º –¥–∏–ª–µ—Ä
‚Ä¢ –í—ã–∏–≥—Ä—ã—à = x2 —Å—Ç–∞–≤–∫–∏, –±–ª—ç–∫–¥–∂–µ–∫ = x2.5 —Å—Ç–∞–≤–∫–∏

üéÅ <b>–ö–∞—Ä—Ç—ã:</b>
‚Ä¢ –¢—É–∑ = 1 –∏–ª–∏ 11 –æ—á–∫–æ–≤
‚Ä¢ –ö–æ—Ä–æ–ª—å, –î–∞–º–∞, –í–∞–ª–µ—Ç = 10 –æ—á–∫–æ–≤
‚Ä¢ –û—Å—Ç–∞–ª—å–Ω—ã–µ = –Ω–æ–º–∏–Ω–∞–ª`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: '100 –º–æ–Ω–µ—Ç', callback_data: 'casino_play_blackjack_100' },
        { text: '200 –º–æ–Ω–µ—Ç', callback_data: 'casino_play_blackjack_200' },
        { text: '500 –º–æ–Ω–µ—Ç', callback_data: 'casino_play_blackjack_500' }
      ],
      [
        { text: '1000 –º–æ–Ω–µ—Ç', callback_data: 'casino_play_blackjack_1000' }
      ],
      [
        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'casino_menu' }
      ]
    ]
  };

  await ctx.editMessageText(blackjackText, { 
    parse_mode: 'HTML', 
    reply_markup: keyboard 
  });
};

// –ò–≥—Ä–∞ –≤ –∫–∞–∑–∏–Ω–æ
const playCasinoGame = async (ctx) => {
  const callbackData = ctx.callbackQuery.data;
  const parts = callbackData.replace('casino_play_', '').split('_');
  const gameType = parts[0];
  const betAmount = parseInt(parts[1]);
  
  const user = ctx.user;
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    if (user.coins < betAmount) {
      await ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø–æ—Ç–µ—Ä—å
    const dailyLoss = await RedisService.getCasinoLimit(user.id);
    const maxDailyLoss = parseInt(process.env.MAX_DAILY_CASINO_LOSS) || 5000;
    
    if (dailyLoss >= maxDailyLoss) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø–æ—Ç–µ—Ä—å!');
      return;
    }
    
    // –ò–≥—Ä–∞–µ–º –≤ –∏–≥—Ä—É
    let result;
    switch (gameType) {
      case 'slots':
        result = playSlots(betAmount);
        break;
      case 'dice':
        result = playDice(betAmount);
        break;
      case 'roulette':
        result = playRoulette(betAmount);
        break;
      case 'blackjack':
        result = playBlackjack(betAmount);
        break;
      default:
        await ctx.answerCbQuery('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞');
        return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    const newBalance = user.coins - betAmount + result.winAmount;
    await DatabaseService.updateUser(user.id, {
      coins: newBalance
    });
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–≥—Ä—É
    await DatabaseService.createCasinoGame(
      user.id,
      gameType,
      betAmount,
      result,
      result.winAmount
    );
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    await DatabaseService.addTransaction(
      user.id,
      'spend',
      betAmount,
      'coins',
      `–°—Ç–∞–≤–∫–∞ –≤ ${gameType}`
    );
    
    if (result.winAmount > 0) {
      await DatabaseService.addTransaction(
        user.id,
        'earn',
        result.winAmount,
        'coins',
        `–í—ã–∏–≥—Ä—ã—à –≤ ${gameType}`
      );
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await DatabaseService.updateUserStats(user.id, {
      casino_games_played: 1,
      casino_winnings: result.winAmount
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø–æ—Ç–µ—Ä—å
    if (result.winAmount < betAmount) {
      await RedisService.setCasinoLimit(user.id, betAmount - result.winAmount);
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await showGameResult(ctx, gameType, betAmount, result);
    
  } catch (error) {
    console.error('Play casino game error:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–≥—Ä–µ');
  }
};

// –ò–≥—Ä–∞ –≤ —Å–ª–æ—Ç—ã
function playSlots(betAmount) {
  const symbols = ['üçí', 'üçã', 'üçá', 'üíé', 'üçÄ'];
  const reels = [
    symbols[Math.floor(Math.random() * symbols.length)],
    symbols[Math.floor(Math.random() * symbols.length)],
    symbols[Math.floor(Math.random() * symbols.length)]
  ];
  
  const isWin = reels[0] === reels[1] && reels[1] === reels[2];
  
  let multiplier = 0;
  if (isWin) {
    const symbol = reels[0];
    switch (symbol) {
      case 'üçí': multiplier = 2; break;
      case 'üçã': multiplier = 3; break;
      case 'üçá': multiplier = 5; break;
      case 'üíé': multiplier = 10; break;
      case 'üçÄ': multiplier = 20; break;
    }
  }
  
  return {
    reels,
    isWin,
    winAmount: betAmount * multiplier,
    multiplier
  };
}

// –ò–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏
function playDice(betAmount) {
  const dice1 = Math.floor(Math.random() * 6) + 1;
  const dice2 = Math.floor(Math.random() * 6) + 1;
  const sum = dice1 + dice2;
  
  let isWin = false;
  let multiplier = 0;
  
  if (sum < 7) {
    isWin = true;
    multiplier = 2;
  } else if (sum > 7) {
    isWin = true;
    multiplier = 2;
  } else {
    // –ù–∏—á—å—è - –≤–æ–∑–≤—Ä–∞—Ç —Å—Ç–∞–≤–∫–∏
    multiplier = 1;
  }
  
  return {
    dice1,
    dice2,
    sum,
    isWin,
    winAmount: betAmount * multiplier,
    multiplier
  };
}

// –ò–≥—Ä–∞ –≤ —Ä—É–ª–µ—Ç–∫—É
function playRoulette(betAmount) {
  const number = Math.floor(Math.random() * 37); // 0-36
  let color = 'üü¢'; // –ó–µ–ª–µ–Ω—ã–π (0)
  
  if (number >= 1 && number <= 18) {
    color = 'üî¥'; // –ö—Ä–∞—Å–Ω—ã–π
  } else if (number >= 19 && number <= 36) {
    color = '‚ö´'; // –ß–µ—Ä–Ω—ã–π
  }
  
  const isWin = color !== 'üü¢';
  const multiplier = isWin ? 2 : 0;
  
  return {
    number,
    color,
    isWin,
    winAmount: betAmount * multiplier,
    multiplier
  };
}

// –ò–≥—Ä–∞ –≤ –±–ª—ç–∫–¥–∂–µ–∫
function playBlackjack(betAmount) {
  // –ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –±–ª—ç–∫–¥–∂–µ–∫–∞
  const playerCards = [Math.floor(Math.random() * 13) + 1, Math.floor(Math.random() * 13) + 1];
  const dealerCards = [Math.floor(Math.random() * 13) + 1, Math.floor(Math.random() * 13) + 1];
  
  const playerScore = calculateBlackjackScore(playerCards);
  const dealerScore = calculateBlackjackScore(dealerCards);
  
  let isWin = false;
  let multiplier = 0;
  
  if (playerScore > 21) {
    // –ü–µ—Ä–µ–±–æ—Ä
    multiplier = 0;
  } else if (dealerScore > 21) {
    // –î–∏–ª–µ—Ä –ø–µ—Ä–µ–±—Ä–∞–ª
    isWin = true;
    multiplier = 2;
  } else if (playerScore > dealerScore) {
    // –ò–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä–∞–ª
    isWin = true;
    multiplier = playerScore === 21 ? 2.5 : 2; // –ë–ª—ç–∫–¥–∂–µ–∫
  } else if (playerScore === dealerScore) {
    // –ù–∏—á—å—è
    multiplier = 1;
  } else {
    // –î–∏–ª–µ—Ä –≤—ã–∏–≥—Ä–∞–ª
    multiplier = 0;
  }
  
  return {
    playerCards,
    dealerCards,
    playerScore,
    dealerScore,
    isWin,
    winAmount: betAmount * multiplier,
    multiplier
  };
}

// –ü–æ–¥—Å—á–µ—Ç –æ—á–∫–æ–≤ –≤ –±–ª—ç–∫–¥–∂–µ–∫–µ
function calculateBlackjackScore(cards) {
  let score = 0;
  let aces = 0;
  
  for (const card of cards) {
    if (card === 1) {
      aces++;
      score += 11;
    } else if (card >= 11) {
      score += 10;
    } else {
      score += card;
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—É–∑–æ–≤
  while (score > 21 && aces > 0) {
    score -= 10;
    aces--;
  }
  
  return score;
}

// –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã
const showGameResult = async (ctx, gameType, betAmount, result) => {
  let resultText = '';
  let gameName = '';
  
  switch (gameType) {
    case 'slots':
      gameName = '–°–ª–æ—Ç-–º–∞—à–∏–Ω–∞';
      resultText = `üé∞ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã</b>

${result.reels.join(' | ')}

${result.isWin ? 'üéâ –í—ã–∏–≥—Ä—ã—à!' : 'üòî –ü—Ä–æ–∏–≥—Ä—ã—à'}
üí∞ –°—Ç–∞–≤–∫–∞: ${betAmount} –º–æ–Ω–µ—Ç
${result.isWin ? `üéÅ –í—ã–∏–≥—Ä—ã—à: ${result.winAmount} –º–æ–Ω–µ—Ç (x${result.multiplier})` : ''}`;
      break;
      
    case 'dice':
      gameName = '–ö–æ—Å—Ç–∏';
      resultText = `üé≤ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã</b>

üé≤ ${result.dice1} + ${result.dice2} = ${result.sum}

${result.isWin ? 'üéâ –í—ã–∏–≥—Ä—ã—à!' : result.multiplier === 1 ? 'ü§ù –ù–∏—á—å—è' : 'üòî –ü—Ä–æ–∏–≥—Ä—ã—à'}
üí∞ –°—Ç–∞–≤–∫–∞: ${betAmount} –º–æ–Ω–µ—Ç
${result.winAmount > 0 ? `üéÅ –í—ã–∏–≥—Ä—ã—à: ${result.winAmount} –º–æ–Ω–µ—Ç` : ''}`;
      break;
      
    case 'roulette':
      gameName = '–†—É–ª–µ—Ç–∫–∞';
      resultText = `üéØ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã</b>

üéØ –í—ã–ø–∞–ª–æ: ${result.number} ${result.color}

${result.isWin ? 'üéâ –í—ã–∏–≥—Ä—ã—à!' : 'üòî –ü—Ä–æ–∏–≥—Ä—ã—à'}
üí∞ –°—Ç–∞–≤–∫–∞: ${betAmount} –º–æ–Ω–µ—Ç
${result.isWin ? `üéÅ –í—ã–∏–≥—Ä—ã—à: ${result.winAmount} –º–æ–Ω–µ—Ç` : ''}`;
      break;
      
    case 'blackjack':
      gameName = '–ë–ª—ç–∫–¥–∂–µ–∫';
      resultText = `üÉè <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã</b>

üë§ –í–∞—à–∏ –∫–∞—Ä—Ç—ã: ${result.playerCards.join(', ')} (${result.playerScore})
ü§ñ –î–∏–ª–µ—Ä: ${result.dealerCards.join(', ')} (${result.dealerScore})

${result.isWin ? 'üéâ –í—ã–∏–≥—Ä—ã—à!' : result.multiplier === 1 ? 'ü§ù –ù–∏—á—å—è' : 'üòî –ü—Ä–æ–∏–≥—Ä—ã—à'}
üí∞ –°—Ç–∞–≤–∫–∞: ${betAmount} –º–æ–Ω–µ—Ç
${result.winAmount > 0 ? `üéÅ –í—ã–∏–≥—Ä—ã—à: ${result.winAmount} –º–æ–Ω–µ—Ç` : ''}`;
      break;
  }
  
  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üéÆ –ò–≥—Ä–∞—Ç—å –µ—â–µ', callback_data: `casino_${gameType}` },
        { text: 'üîô –ö–∞–∑–∏–Ω–æ', callback_data: 'casino_menu' }
      ]
    ]
  };
  
  await ctx.editMessageText(resultText, { 
    parse_mode: 'HTML', 
    reply_markup: keyboard 
  });
  
  await ctx.answerCbQuery(result.isWin ? 'üéâ –í—ã–∏–≥—Ä—ã—à!' : 'üòî –ü—Ä–æ–∏–≥—Ä—ã—à');
};

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∑–∏–Ω–æ
const showCasinoStats = async (ctx) => {
  const user = ctx.user;
  
  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∑–∏–Ω–æ
  const stats = await DatabaseService.query(
    `SELECT 
      COUNT(*) as games_played,
      SUM(bet_amount) as total_bet,
      SUM(win_amount) as total_winnings,
      AVG(win_amount) as avg_winnings
    FROM casino_games 
    WHERE user_id = $1`,
    [user.id]
  );
  
  const casinoStats = stats.rows[0] || {};
  
  const statsText = `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∑–∏–Ω–æ</b>

üéÆ <b>–ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ:</b> ${casinoStats.games_played || 0}
üí∞ <b>–û–±—â–∞—è —Å—Ç–∞–≤–∫–∞:</b> ${casinoStats.total_bet || 0} –º–æ–Ω–µ—Ç
üéÅ <b>–û–±—â–∏–π –≤—ã–∏–≥—Ä—ã—à:</b> ${casinoStats.total_winnings || 0} –º–æ–Ω–µ—Ç
üìà <b>–°—Ä–µ–¥–Ω–∏–π –≤—ã–∏–≥—Ä—ã—à:</b> ${Math.floor(casinoStats.avg_winnings || 0)} –º–æ–Ω–µ—Ç

üí° <b>–°–æ–≤–µ—Ç:</b> –ò–≥—Ä–∞–π—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ!`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'casino_menu' }
      ]
    ]
  };

  await ctx.editMessageText(statsText, { 
    parse_mode: 'HTML', 
    reply_markup: keyboard 
  });
};

module.exports = {
  showCasinoMenu,
  handleCallback
};
