const DatabaseService = require('../services/DatabaseService');

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /farm (idle —Ñ–µ—Ä–º–∞)
const farmHandler = async (ctx) => {
  const user = ctx.user;
  
  const farmText = `üöú <b>Idle —Ñ–µ—Ä–º–∞</b>

üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> ${user.coins} –º–æ–Ω–µ—Ç

üå± <b>–í–∞—à–∞ —Ñ–µ—Ä–º–∞:</b>
‚Ä¢ –ö—É—Ä—ã: 0 (–¥–æ—Ö–æ–¥: 1 –º–æ–Ω–µ—Ç–∞/—á–∞—Å)
‚Ä¢ –ö–æ—Ä–æ–≤—ã: 0 (–¥–æ—Ö–æ–¥: 5 –º–æ–Ω–µ—Ç/—á–∞—Å)
‚Ä¢ –ü—à–µ–Ω–∏—Ü–∞: 0 (–¥–æ—Ö–æ–¥: 2 –º–æ–Ω–µ—Ç—ã/—á–∞—Å)
‚Ä¢ –î–µ—Ä–µ–≤—å—è: 0 (–¥–æ—Ö–æ–¥: 3 –º–æ–Ω–µ—Ç—ã/—á–∞—Å)

üí∞ <b>–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥:</b> 0 –º–æ–Ω–µ—Ç/—á–∞—Å
‚è∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–±–æ—Ä:</b> –ù–∏–∫–æ–≥–¥–∞

üí° <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
–ü–æ–∫—É–ø–∞–π—Ç–µ –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞. –î–æ—Ö–æ–¥ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞!`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üêî –ö—É—Ä—ã (100 –º–æ–Ω–µ—Ç)', callback_data: 'farm_buy_chicken' },
        { text: 'üêÑ –ö–æ—Ä–æ–≤—ã (500 –º–æ–Ω–µ—Ç)', callback_data: 'farm_buy_cow' }
      ],
      [
        { text: 'üåæ –ü—à–µ–Ω–∏—Ü–∞ (200 –º–æ–Ω–µ—Ç)', callback_data: 'farm_buy_wheat' },
        { text: 'üå≥ –î–µ—Ä–µ–≤—å—è (300 –º–æ–Ω–µ—Ç)', callback_data: 'farm_buy_tree' }
      ],
      [
        { text: 'üí∞ –°–æ–±—Ä–∞—Ç—å –¥–æ—Ö–æ–¥', callback_data: 'farm_collect' },
        { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'farm_stats' }
      ],
      [
        { text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
      ]
    ]
  };

  await ctx.reply(farmText, { 
    parse_mode: 'HTML', 
    reply_markup: keyboard 
  });
};

module.exports = farmHandler;
