const DatabaseService = require('../services/DatabaseService');
const RedisService = require('../services/RedisService');

// –ü–æ–∫–∞–∑ –º–µ–Ω—é –∫–ª–∏–∫–µ—Ä –∏–≥—Ä—ã
const showClickerMenu = async (ctx) => {
  const user = ctx.user;
  
  // –ü–æ–ª—É—á–∞–µ–º —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const upgrades = await DatabaseService.query(
    'SELECT * FROM clicker_upgrades WHERE user_id = $1',
    [user.id]
  );
  
  const upgradesMap = {};
  upgrades.rows.forEach(upgrade => {
    upgradesMap[upgrade.upgrade_type] = upgrade.level;
  });
  
  // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
  const session = await RedisService.getClickerSession(user.id);
  
  const clickerText = `üëÜ <b>–ö–ª–∏–∫–µ—Ä –∏–≥—Ä–∞</b>

üí∞ <b>–î–æ—Ö–æ–¥ –∑–∞ –∫–ª–∏–∫:</b> ${calculateClickValue(upgradesMap)} –º–æ–Ω–µ—Ç
‚ö° <b>–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä:</b> ${calculateAutoClickValue(upgradesMap)} –º–æ–Ω–µ—Ç/—Å–µ–∫
ü™ô <b>–ú–æ–Ω–µ—Ç—ã –≤ —Å–µ—Å—Å–∏–∏:</b> ${session ? session.coinsEarned : 0}
üëÜ <b>–ö–ª–∏–∫–æ–≤ –≤ —Å–µ—Å—Å–∏–∏:</b> ${session ? session.clicks : 0}

üîß <b>–í–∞—à–∏ —É–ª—É—á—à–µ–Ω–∏—è:</b>
‚Ä¢ –£—Å–∏–ª–µ–Ω–Ω—ã–π –ø–∞–ª–µ—Ü: ${upgradesMap.finger || 0} —É—Ä–æ–≤–µ–Ω—å
‚Ä¢ –ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä: ${upgradesMap.autoclicker || 0} —É—Ä–æ–≤–µ–Ω—å  
‚Ä¢ –ó–æ–ª–æ—Ç–∞—è —Ä—É–∫–∞: ${upgradesMap.golden_hand || 0} —É—Ä–æ–≤–µ–Ω—å
‚Ä¢ –ë–∏–∑–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä: ${upgradesMap.business || 0} —É—Ä–æ–≤–µ–Ω—å

üí° <b>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:</b>
–ù–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ö–ª–∏–∫!" –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –º–æ–Ω–µ—Ç. –ü–æ–∫—É–ø–∞–π—Ç–µ —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞!`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üëÜ –ö–ª–∏–∫!', callback_data: 'clicker_click' }
      ],
      [
        { text: 'üîß –£–ª—É—á—à–µ–Ω–∏—è', callback_data: 'clicker_upgrades' },
        { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'clicker_stats' }
      ],
      [
        { text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
      ]
    ]
  };

  await ctx.editMessageText(clickerText, { 
    parse_mode: 'HTML', 
    reply_markup: keyboard 
  });
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–æ–≤ –∫–ª–∏–∫–µ—Ä –∏–≥—Ä—ã
const handleCallback = async (ctx) => {
  const callbackData = ctx.callbackQuery.data;
  
  switch (callbackData) {
    case 'clicker_click':
      await handleClick(ctx);
      break;
    case 'clicker_upgrades':
      await showUpgrades(ctx);
      break;
    case 'clicker_stats':
      await showStats(ctx);
      break;
    case 'clicker_menu':
      await showClickerMenu(ctx);
      break;
    default:
      if (callbackData.startsWith('clicker_buy_')) {
        await buyUpgrade(ctx);
      }
  }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞
const handleClick = async (ctx) => {
  const user = ctx.user;
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    let session = await RedisService.getClickerSession(user.id);
    if (!session) {
      session = {
        clicks: 0,
        coinsEarned: 0,
        startTime: Date.now()
      };
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —É–ª—É—á—à–µ–Ω–∏—è
    const upgrades = await DatabaseService.query(
      'SELECT * FROM clicker_upgrades WHERE user_id = $1',
      [user.id]
    );
    
    const upgradesMap = {};
    upgrades.rows.forEach(upgrade => {
      upgradesMap[upgrade.upgrade_type] = upgrade.level;
    });
    
    // –í—ã—á–∏—Å–ª—è–µ–º –¥–æ—Ö–æ–¥ –∑–∞ –∫–ª–∏–∫
    const clickValue = calculateClickValue(upgradesMap);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
    session.clicks++;
    session.coinsEarned += clickValue;
    
    await RedisService.setClickerSession(user.id, session, 3600);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await DatabaseService.updateUserStats(user.id, {
      clicker_clicks: 1
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const newAchievements = await DatabaseService.checkAndAwardAchievement(
      user.id, 
      'clicker_clicks', 
      session.clicks
    );
    
    await ctx.answerCbQuery(`+${clickValue} –º–æ–Ω–µ—Ç! üí∞`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 –∫–ª–∏–∫–æ–≤
    if (session.clicks % 10 === 0) {
      await showClickerMenu(ctx);
    }
    
  } catch (error) {
    console.error('Handle click error:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª–∏–∫–∞');
  }
};

// –ü–æ–∫–∞–∑ —É–ª—É—á—à–µ–Ω–∏–π
const showUpgrades = async (ctx) => {
  const user = ctx.user;
  
  // –ü–æ–ª—É—á–∞–µ–º —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const upgrades = await DatabaseService.query(
    'SELECT * FROM clicker_upgrades WHERE user_id = $1',
    [user.id]
  );
  
  const upgradesMap = {};
  upgrades.rows.forEach(upgrade => {
    upgradesMap[upgrade.upgrade_type] = upgrade.level;
  });
  
  const upgradesText = `üîß <b>–£–ª—É—á—à–µ–Ω–∏—è –∫–ª–∏–∫–µ—Ä –∏–≥—Ä—ã</b>

üí∞ <b>–í–∞—à–∏ –º–æ–Ω–µ—Ç—ã:</b> ${user.coins}

üõ†Ô∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:</b>

üëÜ <b>–£—Å–∏–ª–µ–Ω–Ω—ã–π –ø–∞–ª–µ—Ü</b> (–£—Ä–æ–≤–µ–Ω—å ${upgradesMap.finger || 0})
‚Ä¢ +1 –º–æ–Ω–µ—Ç–∞ –∑–∞ –∫–ª–∏–∫
‚Ä¢ –¶–µ–Ω–∞: ${calculateUpgradePrice('finger', upgradesMap.finger || 0)} –º–æ–Ω–µ—Ç

‚ö° <b>–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä</b> (–£—Ä–æ–≤–µ–Ω—å ${upgradesMap.autoclicker || 0})
‚Ä¢ +1 –º–æ–Ω–µ—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥—É
‚Ä¢ –¶–µ–Ω–∞: ${calculateUpgradePrice('autoclicker', upgradesMap.autoclicker || 0)} –º–æ–Ω–µ—Ç

‚ú® <b>–ó–æ–ª–æ—Ç–∞—è —Ä—É–∫–∞</b> (–£—Ä–æ–≤–µ–Ω—å ${upgradesMap.golden_hand || 0})
‚Ä¢ x2 –∫ –¥–æ—Ö–æ–¥—É –æ—Ç –∫–ª–∏–∫–æ–≤
‚Ä¢ –¶–µ–Ω–∞: ${calculateUpgradePrice('golden_hand', upgradesMap.golden_hand || 0)} –º–æ–Ω–µ—Ç

üè¢ <b>–ë–∏–∑–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä</b> (–£—Ä–æ–≤–µ–Ω—å ${upgradesMap.business || 0})
‚Ä¢ +10 –º–æ–Ω–µ—Ç –≤ —Å–µ–∫—É–Ω–¥—É
‚Ä¢ –¶–µ–Ω–∞: ${calculateUpgradePrice('business', upgradesMap.business || 0)} –º–æ–Ω–µ—Ç`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üëÜ –£—Å–∏–ª–µ–Ω–Ω—ã–π –ø–∞–ª–µ—Ü', callback_data: 'clicker_buy_finger' },
        { text: '‚ö° –ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä', callback_data: 'clicker_buy_autoclicker' }
      ],
      [
        { text: '‚ú® –ó–æ–ª–æ—Ç–∞—è —Ä—É–∫–∞', callback_data: 'clicker_buy_golden_hand' },
        { text: 'üè¢ –ë–∏–∑–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä', callback_data: 'clicker_buy_business' }
      ],
      [
        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'clicker_menu' }
      ]
    ]
  };

  await ctx.editMessageText(upgradesText, { 
    parse_mode: 'HTML', 
    reply_markup: keyboard 
  });
};

// –ü–æ–∫—É–ø–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è
const buyUpgrade = async (ctx) => {
  const callbackData = ctx.callbackQuery.data;
  const upgradeType = callbackData.replace('clicker_buy_', '');
  const user = ctx.user;
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è
    const currentUpgrade = await DatabaseService.query(
      'SELECT level FROM clicker_upgrades WHERE user_id = $1 AND upgrade_type = $2',
      [user.id, upgradeType]
    );
    
    const currentLevel = currentUpgrade.rows[0]?.level || 0;
    const price = calculateUpgradePrice(upgradeType, currentLevel);
    
    if (user.coins < price) {
      await ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!');
      return;
    }
    
    // –ü–æ–∫—É–ø–∞–µ–º —É–ª—É—á—à–µ–Ω–∏–µ
    if (currentLevel === 0) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ
      await DatabaseService.query(
        'INSERT INTO clicker_upgrades (user_id, upgrade_type, level) VALUES ($1, $2, $3)',
        [user.id, upgradeType, 1]
      );
    } else {
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
      await DatabaseService.query(
        'UPDATE clicker_upgrades SET level = level + 1 WHERE user_id = $1 AND upgrade_type = $2',
        [user.id, upgradeType]
      );
    }
    
    // –°–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã
    await DatabaseService.updateUser(user.id, {
      coins: user.coins - price
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await DatabaseService.addTransaction(
      user.id,
      'spend',
      price,
      'coins',
      `–ü–æ–∫—É–ø–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è: ${getUpgradeName(upgradeType)}`
    );
    
    await ctx.answerCbQuery(`‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ –∫—É–ø–ª–µ–Ω–æ!`);
    await showUpgrades(ctx);
    
  } catch (error) {
    console.error('Buy upgrade error:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —É–ª—É—á—à–µ–Ω–∏—è');
  }
};

// –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
const showStats = async (ctx) => {
  const user = ctx.user;
  
  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const stats = await DatabaseService.query(
    'SELECT * FROM user_stats WHERE user_id = $1',
    [user.id]
  );
  
  const userStats = stats.rows[0] || {};
  
  // –ü–æ–ª—É—á–∞–µ–º —É–ª—É—á—à–µ–Ω–∏—è
  const upgrades = await DatabaseService.query(
    'SELECT * FROM clicker_upgrades WHERE user_id = $1',
    [user.id]
  );
  
  const upgradesMap = {};
  upgrades.rows.forEach(upgrade => {
    upgradesMap[upgrade.upgrade_type] = upgrade.level;
  });
  
  const statsText = `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–∫–µ—Ä –∏–≥—Ä—ã</b>

üëÜ <b>–û–±—â–∏–µ –∫–ª–∏–∫–∏:</b> ${userStats.clicker_clicks || 0}
üí∞ <b>–î–æ—Ö–æ–¥ –∑–∞ –∫–ª–∏–∫:</b> ${calculateClickValue(upgradesMap)} –º–æ–Ω–µ—Ç
‚ö° <b>–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä:</b> ${calculateAutoClickValue(upgradesMap)} –º–æ–Ω–µ—Ç/—Å–µ–∫

üîß <b>–£–ª—É—á—à–µ–Ω–∏—è:</b>
‚Ä¢ –£—Å–∏–ª–µ–Ω–Ω—ã–π –ø–∞–ª–µ—Ü: ${upgradesMap.finger || 0} —É—Ä–æ–≤–µ–Ω—å
‚Ä¢ –ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä: ${upgradesMap.autoclicker || 0} —É—Ä–æ–≤–µ–Ω—å
‚Ä¢ –ó–æ–ª–æ—Ç–∞—è —Ä—É–∫–∞: ${upgradesMap.golden_hand || 0} —É—Ä–æ–≤–µ–Ω—å
‚Ä¢ –ë–∏–∑–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä: ${upgradesMap.business || 0} —É—Ä–æ–≤–µ–Ω—å

üí° <b>–°–æ–≤–µ—Ç:</b> –ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ –∫–æ–≥–¥–∞ –≤—ã –Ω–µ –≤ –∏–≥—Ä–µ!`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'clicker_menu' }
      ]
    ]
  };

  await ctx.editMessageText(statsText, { 
    parse_mode: 'HTML', 
    reply_markup: keyboard 
  });
};

// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–∏—è
function calculateUpgradePrice(upgradeType, currentLevel) {
  const basePrices = {
    finger: 100,
    autoclicker: 500,
    golden_hand: 1000,
    business: 5000
  };
  
  const basePrice = basePrices[upgradeType];
  return basePrice * Math.pow(1.5, currentLevel);
}

// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ –∑–∞ –∫–ª–∏–∫
function calculateClickValue(upgradesMap) {
  let baseValue = 1;
  
  // –£—Å–∏–ª–µ–Ω–Ω—ã–π –ø–∞–ª–µ—Ü
  baseValue += (upgradesMap.finger || 0);
  
  // –ó–æ–ª–æ—Ç–∞—è —Ä—É–∫–∞ (–º–Ω–æ–∂–∏—Ç–µ–ª—å)
  if (upgradesMap.golden_hand > 0) {
    baseValue *= Math.pow(2, upgradesMap.golden_hand);
  }
  
  return Math.floor(baseValue);
}

// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞
function calculateAutoClickValue(upgradesMap) {
  let autoValue = 0;
  
  // –ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä
  autoValue += (upgradesMap.autoclicker || 0);
  
  // –ë–∏–∑–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä
  autoValue += (upgradesMap.business || 0) * 10;
  
  return autoValue;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏—è
function getUpgradeName(upgradeType) {
  const names = {
    finger: '–£—Å–∏–ª–µ–Ω–Ω—ã–π –ø–∞–ª–µ—Ü',
    autoclicker: '–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä',
    golden_hand: '–ó–æ–ª–æ—Ç–∞—è —Ä—É–∫–∞',
    business: '–ë–∏–∑–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä'
  };
  
  return names[upgradeType] || upgradeType;
}

module.exports = {
  showClickerMenu,
  handleCallback
};
