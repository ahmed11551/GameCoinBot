const DatabaseService = require('../services/DatabaseService');

// –ü–æ–∫–∞–∑ —Ç—É—Ä–Ω–∏—Ä–æ–≤
const showTournaments = async (ctx) => {
  try {
    const tournaments = await DatabaseService.getActiveTournaments();
    
    let tournamentsText = `üèÜ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã</b>\n\n`;
    
    if (tournaments.length === 0) {
      tournamentsText += `‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤\n\nüí° –ù–æ–≤—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã –ø–æ—è–≤–ª—è—é—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ!`;
    } else {
      tournaments.forEach((tournament, index) => {
        const type = tournament.type === 'free' ? 'üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π' : 
                    tournament.type === 'paid' ? 'üí∞ –ü–ª–∞—Ç–Ω—ã–π' : 'üéâ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π';
        
        tournamentsText += `${index + 1}. <b>${tournament.name}</b>\n`;
        tournamentsText += `${type}\n`;
        tournamentsText += `üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${tournament.current_participants}/${tournament.max_participants || '‚àû'}\n`;
        tournamentsText += `üí∞ –ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥: ${tournament.prize_pool} –º–æ–Ω–µ—Ç\n`;
        tournamentsText += `‚è∞ –î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${getTimeLeft(tournament.end_date)}\n\n`;
      });
    }
    
    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã', callback_data: 'tournament_free' },
          { text: 'üí∞ –ü–ª–∞—Ç–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã', callback_data: 'tournament_paid' }
        ],
        [
          { text: 'üéâ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã', callback_data: 'tournament_special' },
          { text: 'üìä –ú–æ–∏ —Ç—É—Ä–Ω–∏—Ä—ã', callback_data: 'tournament_my' }
        ],
        [
          { text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
        ]
      ]
    };
    
    await ctx.editMessageText(tournamentsText, { 
      parse_mode: 'HTML', 
      reply_markup: keyboard 
    });
    
  } catch (error) {
    console.error('Show tournaments error:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤');
  }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–æ–≤ —Ç—É—Ä–Ω–∏—Ä–æ–≤
const handleCallback = async (ctx) => {
  const callbackData = ctx.callbackQuery.data;
  
  switch (callbackData) {
    case 'tournament_free':
      await showTournamentsByType(ctx, 'free');
      break;
    case 'tournament_paid':
      await showTournamentsByType(ctx, 'paid');
      break;
    case 'tournament_special':
      await showTournamentsByType(ctx, 'special');
      break;
    case 'tournament_my':
      await showMyTournaments(ctx);
      break;
    case 'tournaments':
      await showTournaments(ctx);
      break;
    default:
      if (callbackData.startsWith('tournament_join_')) {
        await joinTournament(ctx);
      }
  }
};

// –ü–æ–∫–∞–∑ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø–æ —Ç–∏–ø—É
const showTournamentsByType = async (ctx, type) => {
  try {
    const tournaments = await DatabaseService.query(
      `SELECT * FROM tournaments 
       WHERE type = $1 AND status = 'active' AND end_date > NOW() 
       ORDER BY start_date ASC`,
      [type]
    );
    
    const typeNames = {
      free: 'üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã',
      paid: 'üí∞ –ü–ª–∞—Ç–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã',
      special: 'üéâ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã'
    };
    
    let tournamentsText = `${typeNames[type]}\n\n`;
    
    if (tournaments.rows.length === 0) {
      tournamentsText += `‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞`;
    } else {
      tournaments.rows.forEach((tournament, index) => {
        tournamentsText += `${index + 1}. <b>${tournament.name}</b>\n`;
        tournamentsText += `üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${tournament.current_participants}/${tournament.max_participants || '‚àû'}\n`;
        tournamentsText += `üí∞ –ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥: ${tournament.prize_pool} –º–æ–Ω–µ—Ç\n`;
        if (tournament.entry_fee > 0) {
          tournamentsText += `üí∏ –í–∑–Ω–æ—Å: ${tournament.entry_fee} –º–æ–Ω–µ—Ç\n`;
        }
        tournamentsText += `‚è∞ –î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${getTimeLeft(tournament.end_date)}\n\n`;
      });
    }
    
    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'tournaments' }
        ]
      ]
    };
    
    await ctx.editMessageText(tournamentsText, { 
      parse_mode: 'HTML', 
      reply_markup: keyboard 
    });
    
  } catch (error) {
    console.error('Show tournaments by type error:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤');
  }
};

// –ü–æ–∫–∞–∑ –º–æ–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
const showMyTournaments = async (ctx) => {
  try {
    const myTournaments = await DatabaseService.query(
      `SELECT t.*, tp.score, tp.rank, tp.prize_amount 
       FROM tournaments t
       JOIN tournament_participants tp ON t.id = tp.tournament_id
       WHERE tp.user_id = $1
       ORDER BY t.end_date DESC`,
      [ctx.user.id]
    );
    
    let tournamentsText = `üèÜ <b>–ú–æ–∏ —Ç—É—Ä–Ω–∏—Ä—ã</b>\n\n`;
    
    if (myTournaments.rows.length === 0) {
      tournamentsText += `‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö`;
    } else {
      myTournaments.rows.forEach((tournament, index) => {
        const status = tournament.status === 'active' ? 'üü¢ –ê–∫—Ç–∏–≤–Ω—ã–π' : 
                      tournament.status === 'finished' ? 'üî¥ –ó–∞–≤–µ—Ä—à–µ–Ω' : '‚è∏Ô∏è –û—Ç–º–µ–Ω–µ–Ω';
        
        tournamentsText += `${index + 1}. <b>${tournament.name}</b>\n`;
        tournamentsText += `${status}\n`;
        tournamentsText += `üìä –û—á–∫–∏: ${tournament.score || 0}\n`;
        if (tournament.rank) {
          tournamentsText += `üèÜ –ú–µ—Å—Ç–æ: ${tournament.rank}\n`;
        }
        if (tournament.prize_amount > 0) {
          tournamentsText += `üí∞ –ü—Ä–∏–∑: ${tournament.prize_amount} –º–æ–Ω–µ—Ç\n`;
        }
        tournamentsText += `\n`;
      });
    }
    
    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'tournaments' }
        ]
      ]
    };
    
    await ctx.editMessageText(tournamentsText, { 
      parse_mode: 'HTML', 
      reply_markup: keyboard 
    });
    
  } catch (error) {
    console.error('Show my tournaments error:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤');
  }
};

// –£—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ
const joinTournament = async (ctx) => {
  const callbackData = ctx.callbackQuery.data;
  const tournamentId = callbackData.replace('tournament_join_', '');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–µ
    const tournament = await DatabaseService.query(
      'SELECT * FROM tournaments WHERE id = $1',
      [tournamentId]
    );
    
    if (tournament.rows.length === 0) {
      await ctx.answerCbQuery('‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    const tourney = tournament.rows[0];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
    if (tourney.status !== 'active') {
      await ctx.answerCbQuery('‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω');
      return;
    }
    
    if (tourney.max_participants && tourney.current_participants >= tourney.max_participants) {
      await ctx.answerCbQuery('‚ùå –¢—É—Ä–Ω–∏—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω');
      return;
    }
    
    if (new Date(tourney.end_date) < new Date()) {
      await ctx.answerCbQuery('‚ùå –¢—É—Ä–Ω–∏—Ä —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–Ω–æ—Å
    if (tourney.entry_fee > 0 && ctx.user.coins < tourney.entry_fee) {
      await ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —É—á–∞—Å—Ç–∏—è');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ
    const existing = await DatabaseService.query(
      'SELECT id FROM tournament_participants WHERE tournament_id = $1 AND user_id = $2',
      [tournamentId, ctx.user.id]
    );
    
    if (existing.rows.length > 0) {
      await ctx.answerCbQuery('‚ùå –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ');
      return;
    }
    
    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ —Ç—É—Ä–Ω–∏—Ä—É
    await DatabaseService.joinTournament(tournamentId, ctx.user.id);
    
    // –°–ø–∏—Å—ã–≤–∞–µ–º –≤–∑–Ω–æ—Å
    if (tourney.entry_fee > 0) {
      await DatabaseService.updateUser(ctx.user.id, {
        coins: ctx.user.coins - tourney.entry_fee
      });
      
      await DatabaseService.addTransaction(
        ctx.user.id,
        'spend',
        tourney.entry_fee,
        'coins',
        `–í–∑–Ω–æ—Å –∑–∞ —Ç—É—Ä–Ω–∏—Ä: ${tourney.name}`
      );
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    await DatabaseService.query(
      'UPDATE tournaments SET current_participants = current_participants + 1 WHERE id = $1',
      [tournamentId]
    );
    
    await ctx.answerCbQuery('‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Ç—É—Ä–Ω–∏—Ä—É!');
    await showTournaments(ctx);
    
  } catch (error) {
    console.error('Join tournament error:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ —Ç—É—Ä–Ω–∏—Ä—É');
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è
function getTimeLeft(endDate) {
  const now = new Date();
  const end = new Date(endDate);
  const diff = end - now;
  
  if (diff <= 0) {
    return '–ó–∞–≤–µ—Ä—à–µ–Ω';
  }
  
  const days = Math.floor(diff / (1000 * 60 * 60 * 24));
  const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
  const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
  
  if (days > 0) {
    return `${days}–¥ ${hours}—á`;
  } else if (hours > 0) {
    return `${hours}—á ${minutes}–º`;
  } else {
    return `${minutes}–º`;
  }
}

module.exports = {
  showTournaments,
  handleCallback
};
