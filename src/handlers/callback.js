const DatabaseService = require('../services/DatabaseService');
const RedisService = require('../services/RedisService');

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
const callbackHandler = async (ctx) => {
  const callbackData = ctx.callbackQuery.data;
  const user = ctx.user;
  
  try {
    switch (callbackData) {
      case 'main_menu':
        await ctx.answerCbQuery();
        await require('./start')(ctx);
        break;
        
      case 'profile':
        await ctx.answerCbQuery();
        await require('./profile')(ctx);
        break;
        
      case 'balance':
        await ctx.answerCbQuery();
        await require('./balance')(ctx);
        break;
        
      case 'quiz_menu':
        await ctx.answerCbQuery();
        await require('./quiz').showQuizMenu(ctx);
        break;
        
      case 'casino_menu':
        await ctx.answerCbQuery();
        await require('./casino').showCasinoMenu(ctx);
        break;
        
      case 'clicker_menu':
        await ctx.answerCbQuery();
        await require('./clicker').showClickerMenu(ctx);
        break;
        
      case 'tournaments':
        await ctx.answerCbQuery();
        await require('./tournament').showTournaments(ctx);
        break;
        
      case 'leaderboard':
        await ctx.answerCbQuery();
        await require('./leaderboard')(ctx);
        break;
        
      case 'shop':
        await ctx.answerCbQuery();
        await require('./shop').showShop(ctx);
        break;
        
      case 'support':
        await ctx.answerCbQuery();
        await require('./support')(ctx);
        break;
        
      case 'claim_daily_bonus':
        await claimDailyBonus(ctx);
        break;
        
      case 'verify_age':
        await verifyAge(ctx);
        break;
        
      case 'age_denied':
        await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∫ –∫–∞–∑–∏–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–ª—è –ª–∏—Ü –º–ª–∞–¥—à–µ 18 –ª–µ—Ç');
        break;
        
      default:
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö callback-–æ–≤
        if (callbackData.startsWith('quiz_')) {
          await require('./quiz').handleCallback(ctx);
        } else if (callbackData.startsWith('casino_')) {
          await require('./casino').handleCallback(ctx);
        } else if (callbackData.startsWith('clicker_')) {
          await require('./clicker').handleCallback(ctx);
        } else if (callbackData.startsWith('tournament_')) {
          await require('./tournament').handleCallback(ctx);
        } else if (callbackData.startsWith('shop_')) {
          await require('./shop').handleCallback(ctx);
        } else {
          await ctx.answerCbQuery('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
        }
    }
  } catch (error) {
    console.error('Callback handler error:', error);
    await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
async function claimDailyBonus(ctx) {
  const user = ctx.user;
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å
    const hasDailyBonus = await RedisService.hasDailyBonus(user.id);
    const canClaimDailyBonus = !hasDailyBonus && 
      (!user.daily_bonus_claimed_at || 
       new Date(user.daily_bonus_claimed_at).toDateString() !== new Date().toDateString());
    
    if (!canClaimDailyBonus) {
      await ctx.answerCbQuery('‚ùå –ë–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω —Å–µ–≥–æ–¥–Ω—è');
      return;
    }
    
    // –î–∞–µ–º –±–æ–Ω—É—Å
    const bonusAmount = 100;
    await DatabaseService.updateUser(user.id, {
      coins: user.coins + bonusAmount,
      daily_bonus_claimed_at: new Date()
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await DatabaseService.addTransaction(
      user.id,
      'earn',
      bonusAmount,
      'coins',
      '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å'
    );
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ Redis
    await RedisService.setDailyBonus(user.id);
    
    await ctx.answerCbQuery(`üéÅ –ü–æ–ª—É—á–µ–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: ${bonusAmount} –º–æ–Ω–µ—Ç!`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await require('./balance')(ctx);
    
  } catch (error) {
    console.error('Claim daily bonus error:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞');
  }
}

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –¥–ª—è –∫–∞–∑–∏–Ω–æ
async function verifyAge(ctx) {
  const user = ctx.user;
  
  try {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞ –Ω–∞ 30 –¥–Ω–µ–π
    await RedisService.set(`age_verified:${user.id}`, true, 30 * 24 * 3600);
    
    await ctx.answerCbQuery('‚úÖ –í–æ–∑—Ä–∞—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ!');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫–∞–∑–∏–Ω–æ
    await require('./casino').showCasinoMenu(ctx);
    
  } catch (error) {
    console.error('Age verification error:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞');
  }
}

module.exports = callbackHandler;
