const DatabaseService = require('../services/DatabaseService');
const RedisService = require('../services/RedisService');

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userMiddleware = async (ctx, next) => {
  try {
    const telegramId = ctx.from.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let user = await RedisService.get(`user:${telegramId}`);
    
    if (!user) {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      user = await DatabaseService.getUserByTelegramId(telegramId);
      
      if (!user) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await DatabaseService.createUser({
          telegramId: telegramId,
          username: ctx.from.username,
          firstName: ctx.from.first_name,
          lastName: ctx.from.last_name,
          languageCode: ctx.from.language_code || 'ru'
        });
      }
      
      // –ö—ç—à–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 1 —á–∞—Å
      await RedisService.set(`user:${telegramId}`, user, 3600);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    ctx.user = user;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    await DatabaseService.updateUser(user.id, {
      last_active_at: new Date()
    });
    
    await next();
  } catch (error) {
    console.error('User middleware error:', error);
    await next();
  }
};

// Middleware –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
const rateLimitMiddleware = async (ctx, next) => {
  try {
    const userId = ctx.from.id;
    const action = ctx.updateType;
    
    const isAllowed = await RedisService.checkRateLimit(userId, action, 30); // 30 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
    
    if (!isAllowed) {
      await ctx.reply('‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.');
      return;
    }
    
    await RedisService.setRateLimit(userId, action, 60);
    await next();
  } catch (error) {
    console.error('Rate limit middleware error:', error);
    await next();
  }
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞
const premiumMiddleware = async (ctx, next) => {
  if (!ctx.user) {
    await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    return;
  }
  
  if (!ctx.user.is_premium || new Date(ctx.user.premium_expires_at) < new Date()) {
    await ctx.reply('üíé –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏.');
    return;
  }
  
  await next();
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞ (–¥–ª—è –∫–∞–∑–∏–Ω–æ)
const ageVerificationMiddleware = async (ctx, next) => {
  if (!ctx.user) {
    await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤–æ–∑—Ä–∞—Å—Ç
  const ageVerified = await RedisService.get(`age_verified:${ctx.user.id}`);
  
  if (!ageVerified) {
    const keyboard = {
      inline_keyboard: [[
        { text: '‚úÖ –ú–Ω–µ –µ—Å—Ç—å 18 –ª–µ—Ç', callback_data: 'verify_age' },
        { text: '‚ùå –ú–Ω–µ –Ω–µ—Ç 18 –ª–µ—Ç', callback_data: 'age_denied' }
      ]]
    };
    
    await ctx.reply(
      'üé∞ <b>–ö–∞–∑–∏–Ω–æ –∏–≥—Ä—ã</b>\n\n' +
      '‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:</b> –ö–∞–∑–∏–Ω–æ –∏–≥—Ä—ã –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–∏—Ü —Å—Ç–∞—Ä—à–µ 18 –ª–µ—Ç.\n\n' +
      '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–≥—Ä–∞–º:',
      { parse_mode: 'HTML', reply_markup: keyboard }
    );
    return;
  }
  
  await next();
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
const checkBalanceMiddleware = (requiredAmount) => {
  return async (ctx, next) => {
    if (!ctx.user) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }
    
    if (ctx.user.coins < requiredAmount) {
      await ctx.reply(
        `üí∞ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!\n\n` +
        `–¢—Ä–µ–±—É–µ—Ç—Å—è: ${requiredAmount} –º–æ–Ω–µ—Ç\n` +
        `–£ –≤–∞—Å: ${ctx.user.coins} –º–æ–Ω–µ—Ç\n\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –º–æ–Ω–µ—Ç.`
      );
      return;
    }
    
    await next();
  };
};

module.exports = {
  userMiddleware,
  rateLimitMiddleware,
  premiumMiddleware,
  ageVerificationMiddleware,
  checkBalanceMiddleware
};
