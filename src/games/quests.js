// –°–∏—Å—Ç–µ–º–∞ –∫–≤–µ—Å—Ç–æ–≤ –∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
const questTypes = {
  quiz_play: {
    name: '–ò–≥—Ä–æ–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω',
    description: '–°—ã–≥—Ä–∞–π—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã',
    icon: 'üéØ',
    unit: '–∏–≥—Ä'
  },
  quiz_correct: {
    name: '–ó–Ω–∞—Ç–æ–∫',
    description: '–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã',
    icon: '‚úÖ',
    unit: '–æ—Ç–≤–µ—Ç–æ–≤'
  },
  casino_play: {
    name: '–ê–∑–∞—Ä—Ç–Ω—ã–π –∏–≥—Ä–æ–∫',
    description: '–°—ã–≥—Ä–∞–π—Ç–µ –≤ –∫–∞–∑–∏–Ω–æ',
    icon: 'üé∞',
    unit: '–∏–≥—Ä'
  },
  casino_win: {
    name: '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å',
    description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ –≤ –∫–∞–∑–∏–Ω–æ',
    icon: 'üèÜ',
    unit: '–ø–æ–±–µ–¥'
  },
  clicker_clicks: {
    name: '–ö–ª–∏–∫–µ—Ä',
    description: '–°–¥–µ–ª–∞–π—Ç–µ –∫–ª–∏–∫–∏',
    icon: 'üëÜ',
    unit: '–∫–ª–∏–∫–æ–≤'
  },
  coins_earn: {
    name: '–ó–∞—Ä–∞–±–æ—Ç–æ–∫',
    description: '–ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ –º–æ–Ω–µ—Ç—ã',
    icon: 'üí∞',
    unit: '–º–æ–Ω–µ—Ç'
  },
  daily_bonus: {
    name: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å',
    description: '–ü–æ–ª—É—á–∏—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å',
    icon: 'üéÅ',
    unit: '—Ä–∞–∑'
  }
};

// –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã
const dailyQuests = [
  {
    id: 'daily_quiz_3',
    name: '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞',
    description: '–°—ã–≥—Ä–∞–π—Ç–µ 3 –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã',
    type: 'quiz_play',
    target: 3,
    reward: { coins: 100, gems: 5, experience: 20 },
    difficulty: 'easy'
  },
  {
    id: 'daily_quiz_correct_10',
    name: '–ó–Ω–∞—Ç–æ–∫ –¥–Ω—è',
    description: '–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 10 –≤–æ–ø—Ä–æ—Å–æ–≤',
    type: 'quiz_correct',
    target: 10,
    reward: { coins: 150, gems: 10, experience: 30 },
    difficulty: 'medium'
  },
  {
    id: 'daily_casino_2',
    name: '–ö–∞–∑–∏–Ω–æ-—ç–∫—Å–ø–µ—Ä—Ç',
    description: '–°—ã–≥—Ä–∞–π—Ç–µ 2 –∏–≥—Ä—ã –≤ –∫–∞–∑–∏–Ω–æ',
    type: 'casino_play',
    target: 2,
    reward: { coins: 80, gems: 5, experience: 15 },
    difficulty: 'easy'
  },
  {
    id: 'daily_casino_win_1',
    name: '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –¥–Ω—è',
    description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ 1 –∏–≥—Ä—É –≤ –∫–∞–∑–∏–Ω–æ',
    type: 'casino_win',
    target: 1,
    reward: { coins: 200, gems: 15, experience: 40 },
    difficulty: 'medium'
  },
  {
    id: 'daily_clicker_50',
    name: '–ö–ª–∏–∫–µ—Ä-–º–∞—Ä–∞—Ñ–æ–Ω',
    description: '–°–¥–µ–ª–∞–π—Ç–µ 50 –∫–ª–∏–∫–æ–≤',
    type: 'clicker_clicks',
    target: 50,
    reward: { coins: 75, gems: 3, experience: 15 },
    difficulty: 'easy'
  },
  {
    id: 'daily_coins_500',
    name: '–ó–∞—Ä–∞–±–æ—Ç–æ–∫ –¥–Ω—è',
    description: '–ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ 500 –º–æ–Ω–µ—Ç',
    type: 'coins_earn',
    target: 500,
    reward: { coins: 100, gems: 5, experience: 20 },
    difficulty: 'medium'
  },
  {
    id: 'daily_bonus_1',
    name: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å',
    description: '–ü–æ–ª—É—á–∏—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å',
    type: 'daily_bonus',
    target: 1,
    reward: { coins: 50, gems: 2, experience: 10 },
    difficulty: 'easy'
  }
];

// –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∫–≤–µ—Å—Ç—ã
const weeklyQuests = [
  {
    id: 'weekly_quiz_20',
    name: '–ù–µ–¥–µ–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω',
    description: '–°—ã–≥—Ä–∞–π—Ç–µ 20 –≤–∏–∫—Ç–æ—Ä–∏–Ω –∑–∞ –Ω–µ–¥–µ–ª—é',
    type: 'quiz_play',
    target: 20,
    reward: { coins: 1000, gems: 50, experience: 200 },
    difficulty: 'hard'
  },
  {
    id: 'weekly_casino_10',
    name: '–ù–µ–¥–µ–ª—è –∫–∞–∑–∏–Ω–æ',
    description: '–°—ã–≥—Ä–∞–π—Ç–µ 10 –∏–≥—Ä –≤ –∫–∞–∑–∏–Ω–æ –∑–∞ –Ω–µ–¥–µ–ª—é',
    type: 'casino_play',
    target: 10,
    reward: { coins: 800, gems: 40, experience: 150 },
    difficulty: 'medium'
  },
  {
    id: 'weekly_clicker_1000',
    name: '–ù–µ–¥–µ–ª—è –∫–ª–∏–∫–æ–≤',
    description: '–°–¥–µ–ª–∞–π—Ç–µ 1000 –∫–ª–∏–∫–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é',
    type: 'clicker_clicks',
    target: 1000,
    reward: { coins: 600, gems: 30, experience: 120 },
    difficulty: 'medium'
  },
  {
    id: 'weekly_coins_5000',
    name: '–ù–µ–¥–µ–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞',
    description: '–ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ 5000 –º–æ–Ω–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é',
    type: 'coins_earn',
    target: 5000,
    reward: { coins: 1200, gems: 60, experience: 250 },
    difficulty: 'hard'
  }
];

// –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const questProgress = new Map();

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getOrCreateProgress(userId) {
  if (!questProgress.has(userId)) {
    questProgress.set(userId, {
      daily: {},
      weekly: {},
      lastDailyReset: new Date().toDateString(),
      lastWeeklyReset: getWeekStart(new Date()).toDateString()
    });
  }
  return questProgress.get(userId);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –Ω–µ–¥–µ–ª–∏
function getWeekStart(date) {
  const d = new Date(date);
  const day = d.getDay();
  const diff = d.getDate() - day + (day === 0 ? -6 : 1); // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
  return new Date(d.setDate(diff));
}

// –°–±—Ä–æ—Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤
function resetDailyQuests(userId) {
  const progress = getOrCreateProgress(userId);
  const today = new Date().toDateString();
  
  if (progress.lastDailyReset !== today) {
    progress.daily = {};
    progress.lastDailyReset = today;
  }
}

// –°–±—Ä–æ—Å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤
function resetWeeklyQuests(userId) {
  const progress = getOrCreateProgress(userId);
  const weekStart = getWeekStart(new Date()).toDateString();
  
  if (progress.lastWeeklyReset !== weekStart) {
    progress.weekly = {};
    progress.lastWeeklyReset = weekStart;
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–≤–µ—Å—Ç–∞
function updateQuestProgress(userId, questType, amount = 1) {
  const progress = getOrCreateProgress(userId);
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–≤–µ—Å—Ç—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  resetDailyQuests(userId);
  resetWeeklyQuests(userId);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã
  for (const quest of dailyQuests) {
    if (quest.type === questType) {
      if (!progress.daily[quest.id]) {
        progress.daily[quest.id] = 0;
      }
      progress.daily[quest.id] += amount;
    }
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∫–≤–µ—Å—Ç—ã
  for (const quest of weeklyQuests) {
    if (quest.type === questType) {
      if (!progress.weekly[quest.id]) {
        progress.weekly[quest.id] = 0;
      }
      progress.weekly[quest.id] += amount;
    }
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getActiveQuests(userId) {
  const progress = getOrCreateProgress(userId);
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–≤–µ—Å—Ç—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  resetDailyQuests(userId);
  resetWeeklyQuests(userId);
  
  const activeQuests = [];
  
  // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã
  for (const quest of dailyQuests) {
    const currentProgress = progress.daily[quest.id] || 0;
    const isCompleted = currentProgress >= quest.target;
    
    activeQuests.push({
      ...quest,
      currentProgress,
      isCompleted,
      progress: Math.min((currentProgress / quest.target) * 100, 100)
    });
  }
  
  // –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∫–≤–µ—Å—Ç—ã
  for (const quest of weeklyQuests) {
    const currentProgress = progress.weekly[quest.id] || 0;
    const isCompleted = currentProgress >= quest.target;
    
    activeQuests.push({
      ...quest,
      currentProgress,
      isCompleted,
      progress: Math.min((currentProgress / quest.target) * 100, 100),
      isWeekly: true
    });
  }
  
  return activeQuests;
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞
function completeQuest(userId, questId) {
  const progress = getOrCreateProgress(userId);
  const quest = [...dailyQuests, ...weeklyQuests].find(q => q.id === questId);
  
  if (!quest) return null;
  
  const questProgress = quest.isWeekly ? progress.weekly[questId] : progress.daily[questId];
  
  if (!questProgress || questProgress < quest.target) {
    return { error: '–ö–≤–µ—Å—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω' };
  }
  
  // –û—Ç–º–µ—á–∞–µ–º –∫–≤–µ—Å—Ç –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
  if (quest.isWeekly) {
    progress.weekly[questId] = -1; // -1 –æ–∑–Ω–∞—á–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
  } else {
    progress.daily[questId] = -1;
  }
  
  return quest.reward;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–≤–µ—Å—Ç–æ–≤
function getQuestStats(userId) {
  const progress = getOrCreateProgress(userId);
  const activeQuests = getActiveQuests(userId);
  
  const dailyCompleted = activeQuests.filter(q => !q.isWeekly && q.isCompleted).length;
  const weeklyCompleted = activeQuests.filter(q => q.isWeekly && q.isCompleted).length;
  const totalDaily = dailyQuests.length;
  const totalWeekly = weeklyQuests.length;
  
  return {
    daily: {
      completed: dailyCompleted,
      total: totalDaily,
      percentage: Math.round((dailyCompleted / totalDaily) * 100)
    },
    weekly: {
      completed: weeklyCompleted,
      total: totalWeekly,
      percentage: Math.round((weeklyCompleted / totalWeekly) * 100)
    },
    activeQuests: activeQuests.filter(q => !q.isCompleted)
  };
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–æ–≤ –ø–æ —Ç–∏–ø—É
function getQuestsByType(questType) {
  return [...dailyQuests, ...weeklyQuests].filter(quest => quest.type === questType);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–æ–≤ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
function getQuestsByDifficulty(difficulty) {
  return [...dailyQuests, ...weeklyQuests].filter(quest => quest.difficulty === difficulty);
}

// –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
function resetUserProgress(userId) {
  questProgress.delete(userId);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–≤–µ—Å—Ç–æ–≤
function getAllQuests() {
  return {
    daily: dailyQuests,
    weekly: weeklyQuests,
    types: questTypes
  };
}

module.exports = {
  questTypes,
  dailyQuests,
  weeklyQuests,
  updateQuestProgress,
  getActiveQuests,
  completeQuest,
  getQuestStats,
  getQuestsByType,
  getQuestsByDifficulty,
  resetUserProgress,
  getAllQuests
};
