// –ú–æ–¥—É–ª—å Mini App –∏–≥—Ä
const miniAppGames = {
  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Mini App
  config: {
    appUrl: process.env.MINI_APP_URL || 'https://coinmaster-miniapp.vercel.app',
    appName: 'CoinMaster Games',
    appDescription: '–ò–≥—Ä–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –≤–∞–ª—é—Ç–æ–π',
    appIcon: 'https://coinmaster-miniapp.vercel.app/icon.png',
    appScreenshot: 'https://coinmaster-miniapp.vercel.app/screenshot.png'
  },

  // –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã
  games: [
    {
      id: 'snake',
      name: '–ó–º–µ–π–∫–∞',
      description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞ –∑–º–µ–π–∫–∞ —Å –Ω–∞–≥—Ä–∞–¥–∞–º–∏',
      icon: 'üêç',
      difficulty: 'easy',
      rewards: {
        coins: { min: 10, max: 50 },
        gems: { min: 1, max: 5 },
        experience: { min: 5, max: 25 }
      },
      requirements: {
        level: 1,
        coins: 0
      }
    },
    {
      id: 'tetris',
      name: '–¢–µ—Ç—Ä–∏—Å',
      description: '–°–æ–±–∏—Ä–∞–π—Ç–µ –ª–∏–Ω–∏–∏ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –º–æ–Ω–µ—Ç—ã',
      icon: 'üß©',
      difficulty: 'medium',
      rewards: {
        coins: { min: 20, max: 100 },
        gems: { min: 2, max: 10 },
        experience: { min: 10, max: 50 }
      },
      requirements: {
        level: 3,
        coins: 100
      }
    },
    {
      id: 'puzzle',
      name: '–ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∞',
      description: '–†–µ—à–∞–π—Ç–µ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã',
      icon: 'üß©',
      difficulty: 'medium',
      rewards: {
        coins: { min: 15, max: 75 },
        gems: { min: 1, max: 8 },
        experience: { min: 8, max: 40 }
      },
      requirements: {
        level: 2,
        coins: 50
      }
    },
    {
      id: 'memory',
      name: '–ü–∞–º—è—Ç—å',
      description: '–¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ –ø–∞–º—è—Ç—å –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ',
      icon: 'üß†',
      difficulty: 'easy',
      rewards: {
        coins: { min: 5, max: 30 },
        gems: { min: 1, max: 3 },
        experience: { min: 3, max: 15 }
      },
      requirements: {
        level: 1,
        coins: 0
      }
    },
    {
      id: 'racing',
      name: '–ì–æ–Ω–∫–∏',
      description: '–ì–æ–Ω–∫–∏ –Ω–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ —Å –ø—Ä–∏–∑–æ–≤—ã–º–∏',
      icon: 'üèéÔ∏è',
      difficulty: 'hard',
      rewards: {
        coins: { min: 50, max: 200 },
        gems: { min: 5, max: 20 },
        experience: { min: 25, max: 100 }
      },
      requirements: {
        level: 5,
        coins: 500
      }
    },
    {
      id: 'arcade',
      name: '–ê—Ä–∫–∞–¥–∞',
      description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –∞—Ä–∫–∞–¥–Ω—ã–µ –∏–≥—Ä—ã',
      icon: 'üéÆ',
      difficulty: 'medium',
      rewards: {
        coins: { min: 25, max: 125 },
        gems: { min: 3, max: 12 },
        experience: { min: 12, max: 60 }
      },
      requirements: {
        level: 4,
        coins: 250
      }
    }
  ],

  // –¢—É—Ä–Ω–∏—Ä—ã Mini App –∏–≥—Ä
  tournaments: [
    {
      id: 'snake_tournament',
      name: '–¢—É—Ä–Ω–∏—Ä –∑–º–µ–π–∫–∏',
      game: 'snake',
      type: 'daily',
      entryFee: 100,
      prizePool: 1000,
      participants: 0,
      maxParticipants: 50,
      startTime: null,
      endTime: null,
      status: 'upcoming'
    },
    {
      id: 'tetris_championship',
      name: '–ß–µ–º–ø–∏–æ–Ω–∞—Ç —Ç–µ—Ç—Ä–∏—Å–∞',
      game: 'tetris',
      type: 'weekly',
      entryFee: 500,
      prizePool: 5000,
      participants: 0,
      maxParticipants: 100,
      startTime: null,
      endTime: null,
      status: 'upcoming'
    }
  ],

  // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è Mini App –∏–≥—Ä
  achievements: [
    {
      id: 'snake_master',
      name: '–ú–∞—Å—Ç–µ—Ä –∑–º–µ–π–∫–∏',
      description: '–ù–∞–±–µ—Ä–∏—Ç–µ 1000 –æ—á–∫–æ–≤ –≤ –∑–º–µ–π–∫–µ',
      icon: 'üêç',
      reward: { coins: 500, gems: 25, experience: 100 },
      condition: { game: 'snake', score: 1000 }
    },
    {
      id: 'tetris_expert',
      name: '–≠–∫—Å–ø–µ—Ä—Ç —Ç–µ—Ç—Ä–∏—Å–∞',
      description: '–û—á–∏—Å—Ç–∏—Ç–µ 50 –ª–∏–Ω–∏–π –≤ —Ç–µ—Ç—Ä–∏—Å–µ',
      icon: 'üß©',
      reward: { coins: 1000, gems: 50, experience: 200 },
      condition: { game: 'tetris', lines: 50 }
    },
    {
      id: 'puzzle_solver',
      name: '–†–µ—à–∞—Ç–µ–ª—å –≥–æ–ª–æ–≤–æ–ª–æ–º–æ–∫',
      description: '–†–µ—à–∏—Ç–µ 100 –≥–æ–ª–æ–≤–æ–ª–æ–º–æ–∫',
      icon: 'üß©',
      reward: { coins: 750, gems: 35, experience: 150 },
      condition: { game: 'puzzle', solved: 100 }
    }
  ]
};

// –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–≥—Ä
const gameSessions = new Map();

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userGameStats = new Map();

// –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
function startGame(userId, gameId) {
  const game = miniAppGames.games.find(g => g.id === gameId);
  if (!game) return { success: false, error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };

  const user = getUserData(userId);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
  if (user.level < game.requirements.level) {
    return { success: false, error: `–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å ${game.requirements.level}` };
  }
  
  if (user.coins < game.requirements.coins) {
    return { success: false, error: `–¢—Ä–µ–±—É–µ—Ç—Å—è ${game.requirements.coins} –º–æ–Ω–µ—Ç` };
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
  const sessionId = `${userId}_${gameId}_${Date.now()}`;
  const session = {
    id: sessionId,
    userId: userId,
    gameId: gameId,
    startTime: Date.now(),
    score: 0,
    level: 1,
    status: 'active'
  };

  gameSessions.set(sessionId, session);

  return {
    success: true,
    sessionId: sessionId,
    game: game,
    miniAppUrl: `${miniAppGames.config.appUrl}/game/${gameId}?session=${sessionId}&user=${userId}`
  };
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
function finishGame(sessionId, score, level = 1) {
  const session = gameSessions.get(sessionId);
  if (!session) return { success: false, error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };

  const game = miniAppGames.games.find(g => g.id === session.gameId);
  if (!game) return { success: false, error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };

  // –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥
  const rewards = calculateRewards(game, score, level);
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  updateUserGameStats(session.userId, session.gameId, score, level);
  
  // –í—ã–¥–∞—á–∞ –Ω–∞–≥—Ä–∞–¥
  const user = getUserData(session.userId);
  user.coins += rewards.coins;
  user.gems += rewards.gems;
  user.experience += rewards.experience;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  checkMiniAppAchievements(session.userId, session.gameId, score, level);
  
  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
  session.status = 'completed';
  session.endTime = Date.now();
  session.score = score;
  session.level = level;

  return {
    success: true,
    score: score,
    level: level,
    rewards: rewards,
    achievements: getNewAchievements(session.userId, session.gameId)
  };
}

// –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥
function calculateRewards(game, score, level) {
  const baseRewards = game.rewards;
  
  // –ë–∞–∑–æ–≤—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
  let coins = Math.floor(Math.random() * (baseRewards.coins.max - baseRewards.coins.min + 1)) + baseRewards.coins.min;
  let gems = Math.floor(Math.random() * (baseRewards.gems.max - baseRewards.gems.min + 1)) + baseRewards.gems.min;
  let experience = Math.floor(Math.random() * (baseRewards.experience.max - baseRewards.experience.min + 1)) + baseRewards.experience.min;
  
  // –ë–æ–Ω—É—Å—ã –∑–∞ —Å—á–µ—Ç
  const scoreMultiplier = Math.min(score / 1000, 3); // –ú–∞–∫—Å–∏–º—É–º x3
  coins = Math.floor(coins * (1 + scoreMultiplier * 0.5));
  gems = Math.floor(gems * (1 + scoreMultiplier * 0.3));
  experience = Math.floor(experience * (1 + scoreMultiplier * 0.4));
  
  // –ë–æ–Ω—É—Å—ã –∑–∞ —É—Ä–æ–≤–µ–Ω—å
  const levelMultiplier = Math.min(level / 10, 2); // –ú–∞–∫—Å–∏–º—É–º x2
  coins = Math.floor(coins * (1 + levelMultiplier * 0.3));
  gems = Math.floor(gems * (1 + levelMultiplier * 0.2));
  experience = Math.floor(experience * (1 + levelMultiplier * 0.25));

  return {
    coins: Math.max(coins, 1),
    gems: Math.max(gems, 0),
    experience: Math.max(experience, 1)
  };
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function updateUserGameStats(userId, gameId, score, level) {
  if (!userGameStats.has(userId)) {
    userGameStats.set(userId, {});
  }
  
  const stats = userGameStats.get(userId);
  if (!stats[gameId]) {
    stats[gameId] = {
      gamesPlayed: 0,
      totalScore: 0,
      bestScore: 0,
      totalLevel: 0,
      bestLevel: 0,
      totalTime: 0
    };
  }
  
  const gameStats = stats[gameId];
  gameStats.gamesPlayed++;
  gameStats.totalScore += score;
  gameStats.bestScore = Math.max(gameStats.bestScore, score);
  gameStats.totalLevel += level;
  gameStats.bestLevel = Math.max(gameStats.bestLevel, level);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π Mini App –∏–≥—Ä
function checkMiniAppAchievements(userId, gameId, score, level) {
  const achievements = miniAppGames.achievements.filter(a => a.condition.game === gameId);
  
  for (const achievement of achievements) {
    const condition = achievement.condition;
    const userStats = getUserGameStats(userId, gameId);
    
    let achieved = false;
    
    if (condition.score && score >= condition.score) {
      achieved = true;
    } else if (condition.lines && userStats.totalScore >= condition.lines * 100) {
      achieved = true;
    } else if (condition.solved && userStats.gamesPlayed >= condition.solved) {
      achieved = true;
    }
    
    if (achieved) {
      // –í—ã–¥–∞—á–∞ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
      const user = getUserData(userId);
      user.coins += achievement.reward.coins;
      user.gems += achievement.reward.gems;
      user.experience += achievement.reward.experience;
    }
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getUserGameStats(userId, gameId = null) {
  if (!userGameStats.has(userId)) {
    userGameStats.set(userId, {});
  }
  
  const stats = userGameStats.get(userId);
  
  if (gameId) {
    return stats[gameId] || {
      gamesPlayed: 0,
      totalScore: 0,
      bestScore: 0,
      totalLevel: 0,
      bestLevel: 0,
      totalTime: 0
    };
  }
  
  return stats;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function getNewAchievements(userId, gameId) {
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  return [];
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getAvailableGames(userId) {
  const user = getUserData(userId);
  
  return miniAppGames.games.filter(game => 
    user.level >= game.requirements.level && 
    user.coins >= game.requirements.coins
  );
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤
function getTournaments(gameId = null) {
  if (gameId) {
    return miniAppGames.tournaments.filter(t => t.game === gameId);
  }
  
  return miniAppGames.tournaments;
}

// –£—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ
function joinTournament(userId, tournamentId) {
  const tournament = miniAppGames.tournaments.find(t => t.id === tournamentId);
  if (!tournament) return { success: false, error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' };
  
  const user = getUserData(userId);
  if (user.coins < tournament.entryFee) {
    return { success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —É—á–∞—Å—Ç–∏—è' };
  }
  
  if (tournament.participants >= tournament.maxParticipants) {
    return { success: false, error: '–¢—É—Ä–Ω–∏—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω' };
  }
  
  // –°–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–∑–Ω–æ—Å–∞
  user.coins -= tournament.entryFee;
  
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
  tournament.participants++;
  
  return {
    success: true,
    tournament: tournament,
    entryFee: tournament.entryFee
  };
}

module.exports = {
  miniAppGames,
  startGame,
  finishGame,
  getUserGameStats,
  getAvailableGames,
  getTournaments,
  joinTournament,
  calculateRewards
};
