// –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
const achievements = {
  // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω
  quiz_first: {
    id: 'quiz_first',
    name: '–ü–µ—Ä–≤—ã–π —à–∞–≥',
    description: '–°—ã–≥—Ä–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É',
    icon: 'üéØ',
    category: 'quiz',
    condition: { type: 'quiz_played', value: 1 },
    reward: { coins: 50, gems: 0, experience: 10 },
    rarity: 'common'
  },
  quiz_expert: {
    id: 'quiz_expert',
    name: '–ó–Ω–∞—Ç–æ–∫',
    description: '–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 100 –≤–æ–ø—Ä–æ—Å–æ–≤',
    icon: 'üß†',
    category: 'quiz',
    condition: { type: 'quiz_correct', value: 100 },
    reward: { coins: 500, gems: 25, experience: 100 },
    rarity: 'rare'
  },
  quiz_master: {
    id: 'quiz_master',
    name: '–ú–∞—Å—Ç–µ—Ä –≤–∏–∫—Ç–æ—Ä–∏–Ω',
    description: '–°—ã–≥—Ä–∞–π—Ç–µ 50 –≤–∏–∫—Ç–æ—Ä–∏–Ω',
    icon: 'üèÜ',
    category: 'quiz',
    condition: { type: 'quiz_played', value: 50 },
    reward: { coins: 1000, gems: 50, experience: 200 },
    rarity: 'epic'
  },
  quiz_perfect: {
    id: 'quiz_perfect',
    name: '–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
    description: '–ü–æ–ª—É—á–∏—Ç–µ 100% –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ',
    icon: 'üíØ',
    category: 'quiz',
    condition: { type: 'quiz_perfect', value: 1 },
    reward: { coins: 200, gems: 10, experience: 50 },
    rarity: 'rare'
  },

  // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∫–∞–∑–∏–Ω–æ
  casino_first: {
    id: 'casino_first',
    name: '–ê–∑–∞—Ä—Ç–Ω—ã–π –∏–≥—Ä–æ–∫',
    description: '–°—ã–≥—Ä–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∏–≥—Ä—É –≤ –∫–∞–∑–∏–Ω–æ',
    icon: 'üé∞',
    category: 'casino',
    condition: { type: 'casino_played', value: 1 },
    reward: { coins: 100, gems: 5, experience: 20 },
    rarity: 'common'
  },
  casino_lucky: {
    id: 'casino_lucky',
    name: '–°—á–∞—Å—Ç–ª–∏–≤—á–∏–∫',
    description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ 10 –∏–≥—Ä –≤ –∫–∞–∑–∏–Ω–æ',
    icon: 'üçÄ',
    category: 'casino',
    condition: { type: 'casino_won', value: 10 },
    reward: { coins: 500, gems: 25, experience: 100 },
    rarity: 'rare'
  },
  casino_high_roller: {
    id: 'casino_high_roller',
    name: '–í—ã—Å–æ–∫–∏–π –∏–≥—Ä–æ–∫',
    description: '–°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É –Ω–∞ 1000 –º–æ–Ω–µ—Ç',
    icon: 'üíé',
    category: 'casino',
    condition: { type: 'casino_max_bet', value: 1 },
    reward: { coins: 300, gems: 15, experience: 75 },
    rarity: 'rare'
  },

  // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∫–ª–∏–∫–µ—Ä –∏–≥—Ä—ã
  clicker_first: {
    id: 'clicker_first',
    name: '–ö–ª–∏–∫–µ—Ä',
    description: '–°–¥–µ–ª–∞–π—Ç–µ 100 –∫–ª–∏–∫–æ–≤',
    icon: 'üëÜ',
    category: 'clicker',
    condition: { type: 'clicker_clicks', value: 100 },
    reward: { coins: 100, gems: 5, experience: 20 },
    rarity: 'common'
  },
  clicker_pro: {
    id: 'clicker_pro',
    name: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–ª–∏–∫–µ—Ä',
    description: '–°–¥–µ–ª–∞–π—Ç–µ 10000 –∫–ª–∏–∫–æ–≤',
    icon: '‚ö°',
    category: 'clicker',
    condition: { type: 'clicker_clicks', value: 10000 },
    reward: { coins: 1000, gems: 50, experience: 200 },
    rarity: 'epic'
  },
  clicker_upgrader: {
    id: 'clicker_upgrader',
    name: '–£–ª—É—á—à–∞—Ç–µ–ª—å',
    description: '–ö—É–ø–∏—Ç–µ 10 —É–ª—É—á—à–µ–Ω–∏–π',
    icon: 'üîß',
    category: 'clicker',
    condition: { type: 'clicker_upgrades', value: 10 },
    reward: { coins: 500, gems: 25, experience: 100 },
    rarity: 'rare'
  },

  // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã
  coin_collector: {
    id: 'coin_collector',
    name: '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä –º–æ–Ω–µ—Ç',
    description: '–ù–∞–∫–æ–ø–∏—Ç–µ 10000 –º–æ–Ω–µ—Ç',
    icon: 'üí∞',
    category: 'currency',
    condition: { type: 'coins_earned', value: 10000 },
    reward: { coins: 500, gems: 25, experience: 100 },
    rarity: 'rare'
  },
  gem_hunter: {
    id: 'gem_hunter',
    name: '–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω–æ—Å—Ç—è–º–∏',
    description: '–ù–∞–∫–æ–ø–∏—Ç–µ 100 –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã—Ö –∫–∞–º–Ω–µ–π',
    icon: 'üíé',
    category: 'currency',
    condition: { type: 'gems_earned', value: 100 },
    reward: { coins: 200, gems: 10, experience: 50 },
    rarity: 'rare'
  },

  // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
  level_up: {
    id: 'level_up',
    name: '–ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è',
    description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 10 —É—Ä–æ–≤–Ω—è',
    icon: '‚≠ê',
    category: 'level',
    condition: { type: 'level_reached', value: 10 },
    reward: { coins: 1000, gems: 50, experience: 0 },
    rarity: 'epic'
  },
  level_master: {
    id: 'level_master',
    name: '–ú–∞—Å—Ç–µ—Ä —É—Ä–æ–≤–Ω–µ–π',
    description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 25 —É—Ä–æ–≤–Ω—è',
    icon: 'üåü',
    category: 'level',
    condition: { type: 'level_reached', value: 25 },
    reward: { coins: 2500, gems: 100, experience: 0 },
    rarity: 'legendary'
  },

  // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  daily_player: {
    id: 'daily_player',
    name: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∏–≥—Ä–æ–∫',
    description: '–ü–æ–ª—É—á–∏—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
    icon: 'üìÖ',
    category: 'activity',
    condition: { type: 'daily_bonus_streak', value: 7 },
    reward: { coins: 500, gems: 25, experience: 100 },
    rarity: 'rare'
  },
  marathon_player: {
    id: 'marathon_player',
    name: '–ú–∞—Ä–∞—Ñ–æ–Ω–µ—Ü',
    description: '–ò–≥—Ä–∞–π—Ç–µ 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
    icon: 'üèÉ',
    category: 'activity',
    condition: { type: 'daily_bonus_streak', value: 30 },
    reward: { coins: 2000, gems: 100, experience: 500 },
    rarity: 'legendary'
  }
};

// –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userAchievements = new Map();

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getUserAchievements(userId) {
  if (!userAchievements.has(userId)) {
    userAchievements.set(userId, new Set());
  }
  return userAchievements.get(userId);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–¥–∞—á–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function checkAchievements(userId, stats) {
  const userAchievementsSet = getUserAchievements(userId);
  const newAchievements = [];

  for (const [achievementId, achievement] of Object.entries(achievements)) {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    if (userAchievementsSet.has(achievementId)) {
      continue;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    if (checkAchievementCondition(achievement.condition, stats)) {
      // –í—ã–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
      userAchievementsSet.add(achievementId);
      newAchievements.push(achievement);
    }
  }

  return newAchievements;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
function checkAchievementCondition(condition, stats) {
  const { type, value } = condition;

  switch (type) {
    case 'quiz_played':
      return (stats.quizPlayed || 0) >= value;
    case 'quiz_correct':
      return (stats.quizCorrect || 0) >= value;
    case 'quiz_perfect':
      return (stats.quizPerfect || 0) >= value;
    case 'casino_played':
      return (stats.casinoPlayed || 0) >= value;
    case 'casino_won':
      return (stats.casinoWon || 0) >= value;
    case 'casino_max_bet':
      return (stats.casinoMaxBet || 0) >= value;
    case 'clicker_clicks':
      return (stats.clickerClicks || 0) >= value;
    case 'clicker_upgrades':
      return (stats.clickerUpgrades || 0) >= value;
    case 'coins_earned':
      return (stats.coinsEarned || 0) >= value;
    case 'gems_earned':
      return (stats.gemsEarned || 0) >= value;
    case 'level_reached':
      return (stats.level || 0) >= value;
    case 'daily_bonus_streak':
      return (stats.dailyBonusStreak || 0) >= value;
    default:
      return false;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getAllUserAchievements(userId) {
  const userAchievementsSet = getUserAchievements(userId);
  const result = [];

  for (const achievementId of userAchievementsSet) {
    const achievement = achievements[achievementId];
    if (achievement) {
      result.push(achievement);
    }
  }

  return result.sort((a, b) => {
    const rarityOrder = { common: 1, rare: 2, epic: 3, legendary: 4 };
    return rarityOrder[b.rarity] - rarityOrder[a.rarity];
  });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function getAchievementsByCategory(category) {
  return Object.values(achievements).filter(achievement => achievement.category === category);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
function getAchievementsByRarity(rarity) {
  return Object.values(achievements).filter(achievement => achievement.rarity === rarity);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
function getAchievementProgress(userId, achievementId) {
  const achievement = achievements[achievementId];
  if (!achievement) return null;

  const userAchievementsSet = getUserAchievements(userId);
  const isCompleted = userAchievementsSet.has(achievementId);

  return {
    achievement,
    isCompleted,
    progress: isCompleted ? 100 : 0 // –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –Ω—É–∂–Ω–æ –≤—ã—á–∏—Å–ª—è—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
  };
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function getAchievementStats(userId) {
  const userAchievementsSet = getUserAchievements(userId);
  const totalAchievements = Object.keys(achievements).length;
  const completedAchievements = userAchievementsSet.size;
  
  const statsByCategory = {};
  const statsByRarity = {};

  for (const achievementId of userAchievementsSet) {
    const achievement = achievements[achievementId];
    if (achievement) {
      // –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
      statsByCategory[achievement.category] = (statsByCategory[achievement.category] || 0) + 1;
      // –ü–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
      statsByRarity[achievement.rarity] = (statsByRarity[achievement.rarity] || 0) + 1;
    }
  }

  return {
    total: totalAchievements,
    completed: completedAchievements,
    percentage: Math.round((completedAchievements / totalAchievements) * 100),
    byCategory: statsByCategory,
    byRarity: statsByRarity
  };
}

// –°–±—Ä–æ—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
function resetUserAchievements(userId) {
  userAchievements.delete(userId);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function getAllAchievements() {
  return Object.values(achievements);
}

module.exports = {
  achievements,
  checkAchievements,
  getUserAchievements,
  getAllUserAchievements,
  getAchievementsByCategory,
  getAchievementsByRarity,
  getAchievementProgress,
  getAchievementStats,
  resetUserAchievements,
  getAllAchievements
};
