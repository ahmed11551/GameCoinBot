// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –±–æ—Ç–∞

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
const formatNumber = (num) => {
  if (num >= 1000000) {
    return (num / 1000000).toFixed(1) + 'M';
  } else if (num >= 1000) {
    return (num / 1000).toFixed(1) + 'K';
  }
  return num.toString();
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
const formatTime = (seconds) => {
  const hours = Math.floor(seconds / 3600);
  const minutes = Math.floor((seconds % 3600) / 60);
  const secs = seconds % 60;
  
  if (hours > 0) {
    return `${hours}—á ${minutes}–º ${secs}—Å`;
  } else if (minutes > 0) {
    return `${minutes}–º ${secs}—Å`;
  } else {
    return `${secs}—Å`;
  }
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
const formatDate = (date) => {
  return new Date(date).toLocaleDateString('ru-RU', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
const randomBetween = (min, max) => {
  return Math.floor(Math.random() * (max - min + 1)) + min;
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
const isAdmin = (userId, adminIds) => {
  return adminIds.includes(userId.toString());
};

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏
const validateBetAmount = (amount, minBet, maxBet, userBalance) => {
  if (amount < minBet) {
    return { valid: false, error: `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: ${minBet} –º–æ–Ω–µ—Ç` };
  }
  if (amount > maxBet) {
    return { valid: false, error: `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: ${maxBet} –º–æ–Ω–µ—Ç` };
  }
  if (amount > userBalance) {
    return { valid: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç' };
  }
  return { valid: true };
};

// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–æ –æ–ø—ã—Ç—É
const calculateLevel = (experience) => {
  return Math.floor(experience / 100) + 1;
};

// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
const experienceToNextLevel = (experience) => {
  const currentLevel = calculateLevel(experience);
  const nextLevelExp = currentLevel * 100;
  return nextLevelExp - experience;
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
const createProgressBar = (current, max, length = 10) => {
  const filled = Math.floor((current / max) * length);
  const empty = length - filled;
  return '‚ñà'.repeat(filled) + '‚ñë'.repeat(empty);
};

// –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
const escapeHtml = (text) => {
  return text
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#39;');
};

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
const createPaginatedKeyboard = (items, currentPage, itemsPerPage, callbackPrefix) => {
  const totalPages = Math.ceil(items.length / itemsPerPage);
  const startIndex = currentPage * itemsPerPage;
  const endIndex = startIndex + itemsPerPage;
  const pageItems = items.slice(startIndex, endIndex);
  
  const keyboard = {
    inline_keyboard: []
  };
  
  // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  pageItems.forEach(item => {
    keyboard.inline_keyboard.push([{
      text: item.text,
      callback_data: `${callbackPrefix}_${item.id}`
    }]);
  });
  
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
  if (totalPages > 1) {
    const navRow = [];
    if (currentPage > 0) {
      navRow.push({
        text: '‚óÄÔ∏è',
        callback_data: `${callbackPrefix}_page_${currentPage - 1}`
      });
    }
    navRow.push({
      text: `${currentPage + 1}/${totalPages}`,
      callback_data: 'noop'
    });
    if (currentPage < totalPages - 1) {
      navRow.push({
        text: '‚ñ∂Ô∏è',
        callback_data: `${callbackPrefix}_page_${currentPage + 1}`
      });
    }
    keyboard.inline_keyboard.push(navRow);
  }
  
  return keyboard;
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ Telegram ID
const isValidTelegramId = (id) => {
  return /^\d+$/.test(id.toString()) && parseInt(id) > 0;
};

// –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID —Å–µ—Å—Å–∏–∏
const generateSessionId = () => {
  return Date.now().toString(36) + Math.random().toString(36).substr(2);
};

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
const logWithTimestamp = (message, level = 'info') => {
  const timestamp = new Date().toISOString();
  console.log(`[${timestamp}] [${level.toUpperCase()}] ${message}`);
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è
const isExpired = (expiryDate) => {
  return new Date(expiryDate) < new Date();
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
const formatCurrency = (amount, currency = '–º–æ–Ω–µ—Ç') => {
  return `${formatNumber(amount)} ${currency}`;
};

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è
const getLevelEmoji = (level) => {
  if (level >= 100) return 'üèÜ';
  if (level >= 50) return 'ü•á';
  if (level >= 25) return 'ü•à';
  if (level >= 10) return 'ü•â';
  if (level >= 5) return '‚≠ê';
  return 'üåü';
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞
const isPremiumActive = (user) => {
  return user.is_premium && new Date(user.premium_expires_at) > new Date();
};

// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞ –ø—Ä–µ–º–∏—É–º
const calculatePremiumBonus = (baseAmount, isPremium) => {
  return isPremium ? Math.floor(baseAmount * 1.2) : baseAmount;
};

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
const createErrorMessage = (error, context = '') => {
  const timestamp = new Date().toISOString();
  return `‚ùå –û—à–∏–±–∫–∞${context ? ` –≤ ${context}` : ''}: ${error.message}\n–í—Ä–µ–º—è: ${timestamp}`;
};

// –í–∞–ª–∏–¥–∞—Ü–∏—è email
const isValidEmail = (email) => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
};

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
const getRandomColor = () => {
  const colors = ['üî¥', 'üü†', 'üü°', 'üü¢', 'üîµ', 'üü£', 'üü§', '‚ö´', '‚ö™'];
  return colors[Math.floor(Math.random() * colors.length)];
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
const getTimeOfDay = () => {
  const hour = new Date().getHours();
  if (hour >= 6 && hour < 12) return 'üåÖ –£—Ç—Ä–æ';
  if (hour >= 12 && hour < 18) return '‚òÄÔ∏è –î–µ–Ω—å';
  if (hour >= 18 && hour < 22) return 'üåÜ –í–µ—á–µ—Ä';
  return 'üåô –ù–æ—á—å';
};

module.exports = {
  formatNumber,
  formatTime,
  formatDate,
  randomBetween,
  isAdmin,
  validateBetAmount,
  calculateLevel,
  experienceToNextLevel,
  createProgressBar,
  escapeHtml,
  createPaginatedKeyboard,
  isValidTelegramId,
  generateSessionId,
  logWithTimestamp,
  isExpired,
  formatCurrency,
  getLevelEmoji,
  isPremiumActive,
  calculatePremiumBonus,
  createErrorMessage,
  isValidEmail,
  getRandomColor,
  getTimeOfDay
};
